/* automatically generated by rust-bindgen */

pub const _SYS_TIME_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __time_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_IOCTL_H: u32 = 1;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const TCGETS: u32 = 21505;
pub const TCSETS: u32 = 21506;
pub const TCSETSW: u32 = 21507;
pub const TCSETSF: u32 = 21508;
pub const TCGETA: u32 = 21509;
pub const TCSETA: u32 = 21510;
pub const TCSETAW: u32 = 21511;
pub const TCSETAF: u32 = 21512;
pub const TCSBRK: u32 = 21513;
pub const TCXONC: u32 = 21514;
pub const TCFLSH: u32 = 21515;
pub const TIOCEXCL: u32 = 21516;
pub const TIOCNXCL: u32 = 21517;
pub const TIOCSCTTY: u32 = 21518;
pub const TIOCGPGRP: u32 = 21519;
pub const TIOCSPGRP: u32 = 21520;
pub const TIOCOUTQ: u32 = 21521;
pub const TIOCSTI: u32 = 21522;
pub const TIOCGWINSZ: u32 = 21523;
pub const TIOCSWINSZ: u32 = 21524;
pub const TIOCMGET: u32 = 21525;
pub const TIOCMBIS: u32 = 21526;
pub const TIOCMBIC: u32 = 21527;
pub const TIOCMSET: u32 = 21528;
pub const TIOCGSOFTCAR: u32 = 21529;
pub const TIOCSSOFTCAR: u32 = 21530;
pub const FIONREAD: u32 = 21531;
pub const TIOCINQ: u32 = 21531;
pub const TIOCLINUX: u32 = 21532;
pub const TIOCCONS: u32 = 21533;
pub const TIOCGSERIAL: u32 = 21534;
pub const TIOCSSERIAL: u32 = 21535;
pub const TIOCPKT: u32 = 21536;
pub const FIONBIO: u32 = 21537;
pub const TIOCNOTTY: u32 = 21538;
pub const TIOCSETD: u32 = 21539;
pub const TIOCGETD: u32 = 21540;
pub const TCSBRKP: u32 = 21541;
pub const TIOCSBRK: u32 = 21543;
pub const TIOCCBRK: u32 = 21544;
pub const TIOCGSID: u32 = 21545;
pub const TIOCGRS485: u32 = 21550;
pub const TIOCSRS485: u32 = 21551;
pub const TCGETX: u32 = 21554;
pub const TCSETX: u32 = 21555;
pub const TCSETXF: u32 = 21556;
pub const TCSETXW: u32 = 21557;
pub const TIOCVHANGUP: u32 = 21559;
pub const FIONCLEX: u32 = 21584;
pub const FIOCLEX: u32 = 21585;
pub const FIOASYNC: u32 = 21586;
pub const TIOCSERCONFIG: u32 = 21587;
pub const TIOCSERGWILD: u32 = 21588;
pub const TIOCSERSWILD: u32 = 21589;
pub const TIOCGLCKTRMIOS: u32 = 21590;
pub const TIOCSLCKTRMIOS: u32 = 21591;
pub const TIOCSERGSTRUCT: u32 = 21592;
pub const TIOCSERGETLSR: u32 = 21593;
pub const TIOCSERGETMULTI: u32 = 21594;
pub const TIOCSERSETMULTI: u32 = 21595;
pub const TIOCMIWAIT: u32 = 21596;
pub const TIOCGICOUNT: u32 = 21597;
pub const FIOQSIZE: u32 = 21600;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TIOCSER_TEMT: u32 = 1;
pub const SIOCADDRT: u32 = 35083;
pub const SIOCDELRT: u32 = 35084;
pub const SIOCRTMSG: u32 = 35085;
pub const SIOCGIFNAME: u32 = 35088;
pub const SIOCSIFLINK: u32 = 35089;
pub const SIOCGIFCONF: u32 = 35090;
pub const SIOCGIFFLAGS: u32 = 35091;
pub const SIOCSIFFLAGS: u32 = 35092;
pub const SIOCGIFADDR: u32 = 35093;
pub const SIOCSIFADDR: u32 = 35094;
pub const SIOCGIFDSTADDR: u32 = 35095;
pub const SIOCSIFDSTADDR: u32 = 35096;
pub const SIOCGIFBRDADDR: u32 = 35097;
pub const SIOCSIFBRDADDR: u32 = 35098;
pub const SIOCGIFNETMASK: u32 = 35099;
pub const SIOCSIFNETMASK: u32 = 35100;
pub const SIOCGIFMETRIC: u32 = 35101;
pub const SIOCSIFMETRIC: u32 = 35102;
pub const SIOCGIFMEM: u32 = 35103;
pub const SIOCSIFMEM: u32 = 35104;
pub const SIOCGIFMTU: u32 = 35105;
pub const SIOCSIFMTU: u32 = 35106;
pub const SIOCSIFNAME: u32 = 35107;
pub const SIOCSIFHWADDR: u32 = 35108;
pub const SIOCGIFENCAP: u32 = 35109;
pub const SIOCSIFENCAP: u32 = 35110;
pub const SIOCGIFHWADDR: u32 = 35111;
pub const SIOCGIFSLAVE: u32 = 35113;
pub const SIOCSIFSLAVE: u32 = 35120;
pub const SIOCADDMULTI: u32 = 35121;
pub const SIOCDELMULTI: u32 = 35122;
pub const SIOCGIFINDEX: u32 = 35123;
pub const SIOGIFINDEX: u32 = 35123;
pub const SIOCSIFPFLAGS: u32 = 35124;
pub const SIOCGIFPFLAGS: u32 = 35125;
pub const SIOCDIFADDR: u32 = 35126;
pub const SIOCSIFHWBROADCAST: u32 = 35127;
pub const SIOCGIFCOUNT: u32 = 35128;
pub const SIOCGIFBR: u32 = 35136;
pub const SIOCSIFBR: u32 = 35137;
pub const SIOCGIFTXQLEN: u32 = 35138;
pub const SIOCSIFTXQLEN: u32 = 35139;
pub const SIOCDARP: u32 = 35155;
pub const SIOCGARP: u32 = 35156;
pub const SIOCSARP: u32 = 35157;
pub const SIOCDRARP: u32 = 35168;
pub const SIOCGRARP: u32 = 35169;
pub const SIOCSRARP: u32 = 35170;
pub const SIOCGIFMAP: u32 = 35184;
pub const SIOCSIFMAP: u32 = 35185;
pub const SIOCADDDLCI: u32 = 35200;
pub const SIOCDELDLCI: u32 = 35201;
pub const SIOCDEVPRIVATE: u32 = 35312;
pub const SIOCPROTOPRIVATE: u32 = 35296;
pub const NCC: u32 = 8;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RI: u32 = 128;
pub const N_TTY: u32 = 0;
pub const N_SLIP: u32 = 1;
pub const N_MOUSE: u32 = 2;
pub const N_PPP: u32 = 3;
pub const N_STRIP: u32 = 4;
pub const N_AX25: u32 = 5;
pub const N_X25: u32 = 6;
pub const N_6PACK: u32 = 7;
pub const N_MASC: u32 = 8;
pub const N_R3964: u32 = 9;
pub const N_PROFIBUS_FDL: u32 = 10;
pub const N_IRDA: u32 = 11;
pub const N_SMSBLOCK: u32 = 12;
pub const N_HDLC: u32 = 13;
pub const N_SYNC_PPP: u32 = 14;
pub const N_HCI: u32 = 15;
pub const CEOL: u8 = 0u8;
pub const CERASE: u32 = 127;
pub const CSTATUS: u8 = 0u8;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u8 = 0u8;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const __BITS_PER_LONG: u32 = 64;
pub const INPUT_PROP_POINTER: u32 = 0;
pub const INPUT_PROP_DIRECT: u32 = 1;
pub const INPUT_PROP_BUTTONPAD: u32 = 2;
pub const INPUT_PROP_SEMI_MT: u32 = 3;
pub const INPUT_PROP_TOPBUTTONPAD: u32 = 4;
pub const INPUT_PROP_POINTING_STICK: u32 = 5;
pub const INPUT_PROP_ACCELEROMETER: u32 = 6;
pub const INPUT_PROP_MAX: u32 = 31;
pub const INPUT_PROP_CNT: u32 = 32;
pub const EV_SYN: u32 = 0;
pub const EV_KEY: u32 = 1;
pub const EV_REL: u32 = 2;
pub const EV_ABS: u32 = 3;
pub const EV_MSC: u32 = 4;
pub const EV_SW: u32 = 5;
pub const EV_LED: u32 = 17;
pub const EV_SND: u32 = 18;
pub const EV_REP: u32 = 20;
pub const EV_FF: u32 = 21;
pub const EV_PWR: u32 = 22;
pub const EV_FF_STATUS: u32 = 23;
pub const EV_MAX: u32 = 31;
pub const EV_CNT: u32 = 32;
pub const SYN_REPORT: u32 = 0;
pub const SYN_CONFIG: u32 = 1;
pub const SYN_MT_REPORT: u32 = 2;
pub const SYN_DROPPED: u32 = 3;
pub const SYN_MAX: u32 = 15;
pub const SYN_CNT: u32 = 16;
pub const KEY_RESERVED: u32 = 0;
pub const KEY_ESC: u32 = 1;
pub const KEY_1: u32 = 2;
pub const KEY_2: u32 = 3;
pub const KEY_3: u32 = 4;
pub const KEY_4: u32 = 5;
pub const KEY_5: u32 = 6;
pub const KEY_6: u32 = 7;
pub const KEY_7: u32 = 8;
pub const KEY_8: u32 = 9;
pub const KEY_9: u32 = 10;
pub const KEY_0: u32 = 11;
pub const KEY_MINUS: u32 = 12;
pub const KEY_EQUAL: u32 = 13;
pub const KEY_BACKSPACE: u32 = 14;
pub const KEY_TAB: u32 = 15;
pub const KEY_Q: u32 = 16;
pub const KEY_W: u32 = 17;
pub const KEY_E: u32 = 18;
pub const KEY_R: u32 = 19;
pub const KEY_T: u32 = 20;
pub const KEY_Y: u32 = 21;
pub const KEY_U: u32 = 22;
pub const KEY_I: u32 = 23;
pub const KEY_O: u32 = 24;
pub const KEY_P: u32 = 25;
pub const KEY_LEFTBRACE: u32 = 26;
pub const KEY_RIGHTBRACE: u32 = 27;
pub const KEY_ENTER: u32 = 28;
pub const KEY_LEFTCTRL: u32 = 29;
pub const KEY_A: u32 = 30;
pub const KEY_S: u32 = 31;
pub const KEY_D: u32 = 32;
pub const KEY_F: u32 = 33;
pub const KEY_G: u32 = 34;
pub const KEY_H: u32 = 35;
pub const KEY_J: u32 = 36;
pub const KEY_K: u32 = 37;
pub const KEY_L: u32 = 38;
pub const KEY_SEMICOLON: u32 = 39;
pub const KEY_APOSTROPHE: u32 = 40;
pub const KEY_GRAVE: u32 = 41;
pub const KEY_LEFTSHIFT: u32 = 42;
pub const KEY_BACKSLASH: u32 = 43;
pub const KEY_Z: u32 = 44;
pub const KEY_X: u32 = 45;
pub const KEY_C: u32 = 46;
pub const KEY_V: u32 = 47;
pub const KEY_B: u32 = 48;
pub const KEY_N: u32 = 49;
pub const KEY_M: u32 = 50;
pub const KEY_COMMA: u32 = 51;
pub const KEY_DOT: u32 = 52;
pub const KEY_SLASH: u32 = 53;
pub const KEY_RIGHTSHIFT: u32 = 54;
pub const KEY_KPASTERISK: u32 = 55;
pub const KEY_LEFTALT: u32 = 56;
pub const KEY_SPACE: u32 = 57;
pub const KEY_CAPSLOCK: u32 = 58;
pub const KEY_F1: u32 = 59;
pub const KEY_F2: u32 = 60;
pub const KEY_F3: u32 = 61;
pub const KEY_F4: u32 = 62;
pub const KEY_F5: u32 = 63;
pub const KEY_F6: u32 = 64;
pub const KEY_F7: u32 = 65;
pub const KEY_F8: u32 = 66;
pub const KEY_F9: u32 = 67;
pub const KEY_F10: u32 = 68;
pub const KEY_NUMLOCK: u32 = 69;
pub const KEY_SCROLLLOCK: u32 = 70;
pub const KEY_KP7: u32 = 71;
pub const KEY_KP8: u32 = 72;
pub const KEY_KP9: u32 = 73;
pub const KEY_KPMINUS: u32 = 74;
pub const KEY_KP4: u32 = 75;
pub const KEY_KP5: u32 = 76;
pub const KEY_KP6: u32 = 77;
pub const KEY_KPPLUS: u32 = 78;
pub const KEY_KP1: u32 = 79;
pub const KEY_KP2: u32 = 80;
pub const KEY_KP3: u32 = 81;
pub const KEY_KP0: u32 = 82;
pub const KEY_KPDOT: u32 = 83;
pub const KEY_ZENKAKUHANKAKU: u32 = 85;
pub const KEY_102ND: u32 = 86;
pub const KEY_F11: u32 = 87;
pub const KEY_F12: u32 = 88;
pub const KEY_RO: u32 = 89;
pub const KEY_KATAKANA: u32 = 90;
pub const KEY_HIRAGANA: u32 = 91;
pub const KEY_HENKAN: u32 = 92;
pub const KEY_KATAKANAHIRAGANA: u32 = 93;
pub const KEY_MUHENKAN: u32 = 94;
pub const KEY_KPJPCOMMA: u32 = 95;
pub const KEY_KPENTER: u32 = 96;
pub const KEY_RIGHTCTRL: u32 = 97;
pub const KEY_KPSLASH: u32 = 98;
pub const KEY_SYSRQ: u32 = 99;
pub const KEY_RIGHTALT: u32 = 100;
pub const KEY_LINEFEED: u32 = 101;
pub const KEY_HOME: u32 = 102;
pub const KEY_UP: u32 = 103;
pub const KEY_PAGEUP: u32 = 104;
pub const KEY_LEFT: u32 = 105;
pub const KEY_RIGHT: u32 = 106;
pub const KEY_END: u32 = 107;
pub const KEY_DOWN: u32 = 108;
pub const KEY_PAGEDOWN: u32 = 109;
pub const KEY_INSERT: u32 = 110;
pub const KEY_DELETE: u32 = 111;
pub const KEY_MACRO: u32 = 112;
pub const KEY_MUTE: u32 = 113;
pub const KEY_VOLUMEDOWN: u32 = 114;
pub const KEY_VOLUMEUP: u32 = 115;
pub const KEY_POWER: u32 = 116;
pub const KEY_KPEQUAL: u32 = 117;
pub const KEY_KPPLUSMINUS: u32 = 118;
pub const KEY_PAUSE: u32 = 119;
pub const KEY_SCALE: u32 = 120;
pub const KEY_KPCOMMA: u32 = 121;
pub const KEY_HANGEUL: u32 = 122;
pub const KEY_HANGUEL: u32 = 122;
pub const KEY_HANJA: u32 = 123;
pub const KEY_YEN: u32 = 124;
pub const KEY_LEFTMETA: u32 = 125;
pub const KEY_RIGHTMETA: u32 = 126;
pub const KEY_COMPOSE: u32 = 127;
pub const KEY_STOP: u32 = 128;
pub const KEY_AGAIN: u32 = 129;
pub const KEY_PROPS: u32 = 130;
pub const KEY_UNDO: u32 = 131;
pub const KEY_FRONT: u32 = 132;
pub const KEY_COPY: u32 = 133;
pub const KEY_OPEN: u32 = 134;
pub const KEY_PASTE: u32 = 135;
pub const KEY_FIND: u32 = 136;
pub const KEY_CUT: u32 = 137;
pub const KEY_HELP: u32 = 138;
pub const KEY_MENU: u32 = 139;
pub const KEY_CALC: u32 = 140;
pub const KEY_SETUP: u32 = 141;
pub const KEY_SLEEP: u32 = 142;
pub const KEY_WAKEUP: u32 = 143;
pub const KEY_FILE: u32 = 144;
pub const KEY_SENDFILE: u32 = 145;
pub const KEY_DELETEFILE: u32 = 146;
pub const KEY_XFER: u32 = 147;
pub const KEY_PROG1: u32 = 148;
pub const KEY_PROG2: u32 = 149;
pub const KEY_WWW: u32 = 150;
pub const KEY_MSDOS: u32 = 151;
pub const KEY_COFFEE: u32 = 152;
pub const KEY_SCREENLOCK: u32 = 152;
pub const KEY_ROTATE_DISPLAY: u32 = 153;
pub const KEY_DIRECTION: u32 = 153;
pub const KEY_CYCLEWINDOWS: u32 = 154;
pub const KEY_MAIL: u32 = 155;
pub const KEY_BOOKMARKS: u32 = 156;
pub const KEY_COMPUTER: u32 = 157;
pub const KEY_BACK: u32 = 158;
pub const KEY_FORWARD: u32 = 159;
pub const KEY_CLOSECD: u32 = 160;
pub const KEY_EJECTCD: u32 = 161;
pub const KEY_EJECTCLOSECD: u32 = 162;
pub const KEY_NEXTSONG: u32 = 163;
pub const KEY_PLAYPAUSE: u32 = 164;
pub const KEY_PREVIOUSSONG: u32 = 165;
pub const KEY_STOPCD: u32 = 166;
pub const KEY_RECORD: u32 = 167;
pub const KEY_REWIND: u32 = 168;
pub const KEY_PHONE: u32 = 169;
pub const KEY_ISO: u32 = 170;
pub const KEY_CONFIG: u32 = 171;
pub const KEY_HOMEPAGE: u32 = 172;
pub const KEY_REFRESH: u32 = 173;
pub const KEY_EXIT: u32 = 174;
pub const KEY_MOVE: u32 = 175;
pub const KEY_EDIT: u32 = 176;
pub const KEY_SCROLLUP: u32 = 177;
pub const KEY_SCROLLDOWN: u32 = 178;
pub const KEY_KPLEFTPAREN: u32 = 179;
pub const KEY_KPRIGHTPAREN: u32 = 180;
pub const KEY_NEW: u32 = 181;
pub const KEY_REDO: u32 = 182;
pub const KEY_F13: u32 = 183;
pub const KEY_F14: u32 = 184;
pub const KEY_F15: u32 = 185;
pub const KEY_F16: u32 = 186;
pub const KEY_F17: u32 = 187;
pub const KEY_F18: u32 = 188;
pub const KEY_F19: u32 = 189;
pub const KEY_F20: u32 = 190;
pub const KEY_F21: u32 = 191;
pub const KEY_F22: u32 = 192;
pub const KEY_F23: u32 = 193;
pub const KEY_F24: u32 = 194;
pub const KEY_PLAYCD: u32 = 200;
pub const KEY_PAUSECD: u32 = 201;
pub const KEY_PROG3: u32 = 202;
pub const KEY_PROG4: u32 = 203;
pub const KEY_DASHBOARD: u32 = 204;
pub const KEY_SUSPEND: u32 = 205;
pub const KEY_CLOSE: u32 = 206;
pub const KEY_PLAY: u32 = 207;
pub const KEY_FASTFORWARD: u32 = 208;
pub const KEY_BASSBOOST: u32 = 209;
pub const KEY_PRINT: u32 = 210;
pub const KEY_HP: u32 = 211;
pub const KEY_CAMERA: u32 = 212;
pub const KEY_SOUND: u32 = 213;
pub const KEY_QUESTION: u32 = 214;
pub const KEY_EMAIL: u32 = 215;
pub const KEY_CHAT: u32 = 216;
pub const KEY_SEARCH: u32 = 217;
pub const KEY_CONNECT: u32 = 218;
pub const KEY_FINANCE: u32 = 219;
pub const KEY_SPORT: u32 = 220;
pub const KEY_SHOP: u32 = 221;
pub const KEY_ALTERASE: u32 = 222;
pub const KEY_CANCEL: u32 = 223;
pub const KEY_BRIGHTNESSDOWN: u32 = 224;
pub const KEY_BRIGHTNESSUP: u32 = 225;
pub const KEY_MEDIA: u32 = 226;
pub const KEY_SWITCHVIDEOMODE: u32 = 227;
pub const KEY_KBDILLUMTOGGLE: u32 = 228;
pub const KEY_KBDILLUMDOWN: u32 = 229;
pub const KEY_KBDILLUMUP: u32 = 230;
pub const KEY_SEND: u32 = 231;
pub const KEY_REPLY: u32 = 232;
pub const KEY_FORWARDMAIL: u32 = 233;
pub const KEY_SAVE: u32 = 234;
pub const KEY_DOCUMENTS: u32 = 235;
pub const KEY_BATTERY: u32 = 236;
pub const KEY_BLUETOOTH: u32 = 237;
pub const KEY_WLAN: u32 = 238;
pub const KEY_UWB: u32 = 239;
pub const KEY_UNKNOWN: u32 = 240;
pub const KEY_VIDEO_NEXT: u32 = 241;
pub const KEY_VIDEO_PREV: u32 = 242;
pub const KEY_BRIGHTNESS_CYCLE: u32 = 243;
pub const KEY_BRIGHTNESS_AUTO: u32 = 244;
pub const KEY_BRIGHTNESS_ZERO: u32 = 244;
pub const KEY_DISPLAY_OFF: u32 = 245;
pub const KEY_WWAN: u32 = 246;
pub const KEY_WIMAX: u32 = 246;
pub const KEY_RFKILL: u32 = 247;
pub const KEY_MICMUTE: u32 = 248;
pub const BTN_MISC: u32 = 256;
pub const BTN_0: u32 = 256;
pub const BTN_1: u32 = 257;
pub const BTN_2: u32 = 258;
pub const BTN_3: u32 = 259;
pub const BTN_4: u32 = 260;
pub const BTN_5: u32 = 261;
pub const BTN_6: u32 = 262;
pub const BTN_7: u32 = 263;
pub const BTN_8: u32 = 264;
pub const BTN_9: u32 = 265;
pub const BTN_MOUSE: u32 = 272;
pub const BTN_LEFT: u32 = 272;
pub const BTN_RIGHT: u32 = 273;
pub const BTN_MIDDLE: u32 = 274;
pub const BTN_SIDE: u32 = 275;
pub const BTN_EXTRA: u32 = 276;
pub const BTN_FORWARD: u32 = 277;
pub const BTN_BACK: u32 = 278;
pub const BTN_TASK: u32 = 279;
pub const BTN_JOYSTICK: u32 = 288;
pub const BTN_TRIGGER: u32 = 288;
pub const BTN_THUMB: u32 = 289;
pub const BTN_THUMB2: u32 = 290;
pub const BTN_TOP: u32 = 291;
pub const BTN_TOP2: u32 = 292;
pub const BTN_PINKIE: u32 = 293;
pub const BTN_BASE: u32 = 294;
pub const BTN_BASE2: u32 = 295;
pub const BTN_BASE3: u32 = 296;
pub const BTN_BASE4: u32 = 297;
pub const BTN_BASE5: u32 = 298;
pub const BTN_BASE6: u32 = 299;
pub const BTN_DEAD: u32 = 303;
pub const BTN_GAMEPAD: u32 = 304;
pub const BTN_SOUTH: u32 = 304;
pub const BTN_A: u32 = 304;
pub const BTN_EAST: u32 = 305;
pub const BTN_B: u32 = 305;
pub const BTN_C: u32 = 306;
pub const BTN_NORTH: u32 = 307;
pub const BTN_X: u32 = 307;
pub const BTN_WEST: u32 = 308;
pub const BTN_Y: u32 = 308;
pub const BTN_Z: u32 = 309;
pub const BTN_TL: u32 = 310;
pub const BTN_TR: u32 = 311;
pub const BTN_TL2: u32 = 312;
pub const BTN_TR2: u32 = 313;
pub const BTN_SELECT: u32 = 314;
pub const BTN_START: u32 = 315;
pub const BTN_MODE: u32 = 316;
pub const BTN_THUMBL: u32 = 317;
pub const BTN_THUMBR: u32 = 318;
pub const BTN_DIGI: u32 = 320;
pub const BTN_TOOL_PEN: u32 = 320;
pub const BTN_TOOL_RUBBER: u32 = 321;
pub const BTN_TOOL_BRUSH: u32 = 322;
pub const BTN_TOOL_PENCIL: u32 = 323;
pub const BTN_TOOL_AIRBRUSH: u32 = 324;
pub const BTN_TOOL_FINGER: u32 = 325;
pub const BTN_TOOL_MOUSE: u32 = 326;
pub const BTN_TOOL_LENS: u32 = 327;
pub const BTN_TOOL_QUINTTAP: u32 = 328;
pub const BTN_STYLUS3: u32 = 329;
pub const BTN_TOUCH: u32 = 330;
pub const BTN_STYLUS: u32 = 331;
pub const BTN_STYLUS2: u32 = 332;
pub const BTN_TOOL_DOUBLETAP: u32 = 333;
pub const BTN_TOOL_TRIPLETAP: u32 = 334;
pub const BTN_TOOL_QUADTAP: u32 = 335;
pub const BTN_WHEEL: u32 = 336;
pub const BTN_GEAR_DOWN: u32 = 336;
pub const BTN_GEAR_UP: u32 = 337;
pub const KEY_OK: u32 = 352;
pub const KEY_SELECT: u32 = 353;
pub const KEY_GOTO: u32 = 354;
pub const KEY_CLEAR: u32 = 355;
pub const KEY_POWER2: u32 = 356;
pub const KEY_OPTION: u32 = 357;
pub const KEY_INFO: u32 = 358;
pub const KEY_TIME: u32 = 359;
pub const KEY_VENDOR: u32 = 360;
pub const KEY_ARCHIVE: u32 = 361;
pub const KEY_PROGRAM: u32 = 362;
pub const KEY_CHANNEL: u32 = 363;
pub const KEY_FAVORITES: u32 = 364;
pub const KEY_EPG: u32 = 365;
pub const KEY_PVR: u32 = 366;
pub const KEY_MHP: u32 = 367;
pub const KEY_LANGUAGE: u32 = 368;
pub const KEY_TITLE: u32 = 369;
pub const KEY_SUBTITLE: u32 = 370;
pub const KEY_ANGLE: u32 = 371;
pub const KEY_ZOOM: u32 = 372;
pub const KEY_MODE: u32 = 373;
pub const KEY_KEYBOARD: u32 = 374;
pub const KEY_SCREEN: u32 = 375;
pub const KEY_PC: u32 = 376;
pub const KEY_TV: u32 = 377;
pub const KEY_TV2: u32 = 378;
pub const KEY_VCR: u32 = 379;
pub const KEY_VCR2: u32 = 380;
pub const KEY_SAT: u32 = 381;
pub const KEY_SAT2: u32 = 382;
pub const KEY_CD: u32 = 383;
pub const KEY_TAPE: u32 = 384;
pub const KEY_RADIO: u32 = 385;
pub const KEY_TUNER: u32 = 386;
pub const KEY_PLAYER: u32 = 387;
pub const KEY_TEXT: u32 = 388;
pub const KEY_DVD: u32 = 389;
pub const KEY_AUX: u32 = 390;
pub const KEY_MP3: u32 = 391;
pub const KEY_AUDIO: u32 = 392;
pub const KEY_VIDEO: u32 = 393;
pub const KEY_DIRECTORY: u32 = 394;
pub const KEY_LIST: u32 = 395;
pub const KEY_MEMO: u32 = 396;
pub const KEY_CALENDAR: u32 = 397;
pub const KEY_RED: u32 = 398;
pub const KEY_GREEN: u32 = 399;
pub const KEY_YELLOW: u32 = 400;
pub const KEY_BLUE: u32 = 401;
pub const KEY_CHANNELUP: u32 = 402;
pub const KEY_CHANNELDOWN: u32 = 403;
pub const KEY_FIRST: u32 = 404;
pub const KEY_LAST: u32 = 405;
pub const KEY_AB: u32 = 406;
pub const KEY_NEXT: u32 = 407;
pub const KEY_RESTART: u32 = 408;
pub const KEY_SLOW: u32 = 409;
pub const KEY_SHUFFLE: u32 = 410;
pub const KEY_BREAK: u32 = 411;
pub const KEY_PREVIOUS: u32 = 412;
pub const KEY_DIGITS: u32 = 413;
pub const KEY_TEEN: u32 = 414;
pub const KEY_TWEN: u32 = 415;
pub const KEY_VIDEOPHONE: u32 = 416;
pub const KEY_GAMES: u32 = 417;
pub const KEY_ZOOMIN: u32 = 418;
pub const KEY_ZOOMOUT: u32 = 419;
pub const KEY_ZOOMRESET: u32 = 420;
pub const KEY_WORDPROCESSOR: u32 = 421;
pub const KEY_EDITOR: u32 = 422;
pub const KEY_SPREADSHEET: u32 = 423;
pub const KEY_GRAPHICSEDITOR: u32 = 424;
pub const KEY_PRESENTATION: u32 = 425;
pub const KEY_DATABASE: u32 = 426;
pub const KEY_NEWS: u32 = 427;
pub const KEY_VOICEMAIL: u32 = 428;
pub const KEY_ADDRESSBOOK: u32 = 429;
pub const KEY_MESSENGER: u32 = 430;
pub const KEY_DISPLAYTOGGLE: u32 = 431;
pub const KEY_BRIGHTNESS_TOGGLE: u32 = 431;
pub const KEY_SPELLCHECK: u32 = 432;
pub const KEY_LOGOFF: u32 = 433;
pub const KEY_DOLLAR: u32 = 434;
pub const KEY_EURO: u32 = 435;
pub const KEY_FRAMEBACK: u32 = 436;
pub const KEY_FRAMEFORWARD: u32 = 437;
pub const KEY_CONTEXT_MENU: u32 = 438;
pub const KEY_MEDIA_REPEAT: u32 = 439;
pub const KEY_10CHANNELSUP: u32 = 440;
pub const KEY_10CHANNELSDOWN: u32 = 441;
pub const KEY_IMAGES: u32 = 442;
pub const KEY_DEL_EOL: u32 = 448;
pub const KEY_DEL_EOS: u32 = 449;
pub const KEY_INS_LINE: u32 = 450;
pub const KEY_DEL_LINE: u32 = 451;
pub const KEY_FN: u32 = 464;
pub const KEY_FN_ESC: u32 = 465;
pub const KEY_FN_F1: u32 = 466;
pub const KEY_FN_F2: u32 = 467;
pub const KEY_FN_F3: u32 = 468;
pub const KEY_FN_F4: u32 = 469;
pub const KEY_FN_F5: u32 = 470;
pub const KEY_FN_F6: u32 = 471;
pub const KEY_FN_F7: u32 = 472;
pub const KEY_FN_F8: u32 = 473;
pub const KEY_FN_F9: u32 = 474;
pub const KEY_FN_F10: u32 = 475;
pub const KEY_FN_F11: u32 = 476;
pub const KEY_FN_F12: u32 = 477;
pub const KEY_FN_1: u32 = 478;
pub const KEY_FN_2: u32 = 479;
pub const KEY_FN_D: u32 = 480;
pub const KEY_FN_E: u32 = 481;
pub const KEY_FN_F: u32 = 482;
pub const KEY_FN_S: u32 = 483;
pub const KEY_FN_B: u32 = 484;
pub const KEY_BRL_DOT1: u32 = 497;
pub const KEY_BRL_DOT2: u32 = 498;
pub const KEY_BRL_DOT3: u32 = 499;
pub const KEY_BRL_DOT4: u32 = 500;
pub const KEY_BRL_DOT5: u32 = 501;
pub const KEY_BRL_DOT6: u32 = 502;
pub const KEY_BRL_DOT7: u32 = 503;
pub const KEY_BRL_DOT8: u32 = 504;
pub const KEY_BRL_DOT9: u32 = 505;
pub const KEY_BRL_DOT10: u32 = 506;
pub const KEY_NUMERIC_0: u32 = 512;
pub const KEY_NUMERIC_1: u32 = 513;
pub const KEY_NUMERIC_2: u32 = 514;
pub const KEY_NUMERIC_3: u32 = 515;
pub const KEY_NUMERIC_4: u32 = 516;
pub const KEY_NUMERIC_5: u32 = 517;
pub const KEY_NUMERIC_6: u32 = 518;
pub const KEY_NUMERIC_7: u32 = 519;
pub const KEY_NUMERIC_8: u32 = 520;
pub const KEY_NUMERIC_9: u32 = 521;
pub const KEY_NUMERIC_STAR: u32 = 522;
pub const KEY_NUMERIC_POUND: u32 = 523;
pub const KEY_NUMERIC_A: u32 = 524;
pub const KEY_NUMERIC_B: u32 = 525;
pub const KEY_NUMERIC_C: u32 = 526;
pub const KEY_NUMERIC_D: u32 = 527;
pub const KEY_CAMERA_FOCUS: u32 = 528;
pub const KEY_WPS_BUTTON: u32 = 529;
pub const KEY_TOUCHPAD_TOGGLE: u32 = 530;
pub const KEY_TOUCHPAD_ON: u32 = 531;
pub const KEY_TOUCHPAD_OFF: u32 = 532;
pub const KEY_CAMERA_ZOOMIN: u32 = 533;
pub const KEY_CAMERA_ZOOMOUT: u32 = 534;
pub const KEY_CAMERA_UP: u32 = 535;
pub const KEY_CAMERA_DOWN: u32 = 536;
pub const KEY_CAMERA_LEFT: u32 = 537;
pub const KEY_CAMERA_RIGHT: u32 = 538;
pub const KEY_ATTENDANT_ON: u32 = 539;
pub const KEY_ATTENDANT_OFF: u32 = 540;
pub const KEY_ATTENDANT_TOGGLE: u32 = 541;
pub const KEY_LIGHTS_TOGGLE: u32 = 542;
pub const BTN_DPAD_UP: u32 = 544;
pub const BTN_DPAD_DOWN: u32 = 545;
pub const BTN_DPAD_LEFT: u32 = 546;
pub const BTN_DPAD_RIGHT: u32 = 547;
pub const KEY_ALS_TOGGLE: u32 = 560;
pub const KEY_BUTTONCONFIG: u32 = 576;
pub const KEY_TASKMANAGER: u32 = 577;
pub const KEY_JOURNAL: u32 = 578;
pub const KEY_CONTROLPANEL: u32 = 579;
pub const KEY_APPSELECT: u32 = 580;
pub const KEY_SCREENSAVER: u32 = 581;
pub const KEY_VOICECOMMAND: u32 = 582;
pub const KEY_ASSISTANT: u32 = 583;
pub const KEY_BRIGHTNESS_MIN: u32 = 592;
pub const KEY_BRIGHTNESS_MAX: u32 = 593;
pub const KEY_KBDINPUTASSIST_PREV: u32 = 608;
pub const KEY_KBDINPUTASSIST_NEXT: u32 = 609;
pub const KEY_KBDINPUTASSIST_PREVGROUP: u32 = 610;
pub const KEY_KBDINPUTASSIST_NEXTGROUP: u32 = 611;
pub const KEY_KBDINPUTASSIST_ACCEPT: u32 = 612;
pub const KEY_KBDINPUTASSIST_CANCEL: u32 = 613;
pub const KEY_RIGHT_UP: u32 = 614;
pub const KEY_RIGHT_DOWN: u32 = 615;
pub const KEY_LEFT_UP: u32 = 616;
pub const KEY_LEFT_DOWN: u32 = 617;
pub const KEY_ROOT_MENU: u32 = 618;
pub const KEY_MEDIA_TOP_MENU: u32 = 619;
pub const KEY_NUMERIC_11: u32 = 620;
pub const KEY_NUMERIC_12: u32 = 621;
pub const KEY_AUDIO_DESC: u32 = 622;
pub const KEY_3D_MODE: u32 = 623;
pub const KEY_NEXT_FAVORITE: u32 = 624;
pub const KEY_STOP_RECORD: u32 = 625;
pub const KEY_PAUSE_RECORD: u32 = 626;
pub const KEY_VOD: u32 = 627;
pub const KEY_UNMUTE: u32 = 628;
pub const KEY_FASTREVERSE: u32 = 629;
pub const KEY_SLOWREVERSE: u32 = 630;
pub const KEY_DATA: u32 = 631;
pub const KEY_ONSCREEN_KEYBOARD: u32 = 632;
pub const BTN_TRIGGER_HAPPY: u32 = 704;
pub const BTN_TRIGGER_HAPPY1: u32 = 704;
pub const BTN_TRIGGER_HAPPY2: u32 = 705;
pub const BTN_TRIGGER_HAPPY3: u32 = 706;
pub const BTN_TRIGGER_HAPPY4: u32 = 707;
pub const BTN_TRIGGER_HAPPY5: u32 = 708;
pub const BTN_TRIGGER_HAPPY6: u32 = 709;
pub const BTN_TRIGGER_HAPPY7: u32 = 710;
pub const BTN_TRIGGER_HAPPY8: u32 = 711;
pub const BTN_TRIGGER_HAPPY9: u32 = 712;
pub const BTN_TRIGGER_HAPPY10: u32 = 713;
pub const BTN_TRIGGER_HAPPY11: u32 = 714;
pub const BTN_TRIGGER_HAPPY12: u32 = 715;
pub const BTN_TRIGGER_HAPPY13: u32 = 716;
pub const BTN_TRIGGER_HAPPY14: u32 = 717;
pub const BTN_TRIGGER_HAPPY15: u32 = 718;
pub const BTN_TRIGGER_HAPPY16: u32 = 719;
pub const BTN_TRIGGER_HAPPY17: u32 = 720;
pub const BTN_TRIGGER_HAPPY18: u32 = 721;
pub const BTN_TRIGGER_HAPPY19: u32 = 722;
pub const BTN_TRIGGER_HAPPY20: u32 = 723;
pub const BTN_TRIGGER_HAPPY21: u32 = 724;
pub const BTN_TRIGGER_HAPPY22: u32 = 725;
pub const BTN_TRIGGER_HAPPY23: u32 = 726;
pub const BTN_TRIGGER_HAPPY24: u32 = 727;
pub const BTN_TRIGGER_HAPPY25: u32 = 728;
pub const BTN_TRIGGER_HAPPY26: u32 = 729;
pub const BTN_TRIGGER_HAPPY27: u32 = 730;
pub const BTN_TRIGGER_HAPPY28: u32 = 731;
pub const BTN_TRIGGER_HAPPY29: u32 = 732;
pub const BTN_TRIGGER_HAPPY30: u32 = 733;
pub const BTN_TRIGGER_HAPPY31: u32 = 734;
pub const BTN_TRIGGER_HAPPY32: u32 = 735;
pub const BTN_TRIGGER_HAPPY33: u32 = 736;
pub const BTN_TRIGGER_HAPPY34: u32 = 737;
pub const BTN_TRIGGER_HAPPY35: u32 = 738;
pub const BTN_TRIGGER_HAPPY36: u32 = 739;
pub const BTN_TRIGGER_HAPPY37: u32 = 740;
pub const BTN_TRIGGER_HAPPY38: u32 = 741;
pub const BTN_TRIGGER_HAPPY39: u32 = 742;
pub const BTN_TRIGGER_HAPPY40: u32 = 743;
pub const KEY_MIN_INTERESTING: u32 = 113;
pub const KEY_MAX: u32 = 767;
pub const KEY_CNT: u32 = 768;
pub const REL_X: u32 = 0;
pub const REL_Y: u32 = 1;
pub const REL_Z: u32 = 2;
pub const REL_RX: u32 = 3;
pub const REL_RY: u32 = 4;
pub const REL_RZ: u32 = 5;
pub const REL_HWHEEL: u32 = 6;
pub const REL_DIAL: u32 = 7;
pub const REL_WHEEL: u32 = 8;
pub const REL_MISC: u32 = 9;
pub const REL_MAX: u32 = 15;
pub const REL_CNT: u32 = 16;
pub const ABS_X: u32 = 0;
pub const ABS_Y: u32 = 1;
pub const ABS_Z: u32 = 2;
pub const ABS_RX: u32 = 3;
pub const ABS_RY: u32 = 4;
pub const ABS_RZ: u32 = 5;
pub const ABS_THROTTLE: u32 = 6;
pub const ABS_RUDDER: u32 = 7;
pub const ABS_WHEEL: u32 = 8;
pub const ABS_GAS: u32 = 9;
pub const ABS_BRAKE: u32 = 10;
pub const ABS_HAT0X: u32 = 16;
pub const ABS_HAT0Y: u32 = 17;
pub const ABS_HAT1X: u32 = 18;
pub const ABS_HAT1Y: u32 = 19;
pub const ABS_HAT2X: u32 = 20;
pub const ABS_HAT2Y: u32 = 21;
pub const ABS_HAT3X: u32 = 22;
pub const ABS_HAT3Y: u32 = 23;
pub const ABS_PRESSURE: u32 = 24;
pub const ABS_DISTANCE: u32 = 25;
pub const ABS_TILT_X: u32 = 26;
pub const ABS_TILT_Y: u32 = 27;
pub const ABS_TOOL_WIDTH: u32 = 28;
pub const ABS_VOLUME: u32 = 32;
pub const ABS_MISC: u32 = 40;
pub const ABS_RESERVED: u32 = 46;
pub const ABS_MT_SLOT: u32 = 47;
pub const ABS_MT_TOUCH_MAJOR: u32 = 48;
pub const ABS_MT_TOUCH_MINOR: u32 = 49;
pub const ABS_MT_WIDTH_MAJOR: u32 = 50;
pub const ABS_MT_WIDTH_MINOR: u32 = 51;
pub const ABS_MT_ORIENTATION: u32 = 52;
pub const ABS_MT_POSITION_X: u32 = 53;
pub const ABS_MT_POSITION_Y: u32 = 54;
pub const ABS_MT_TOOL_TYPE: u32 = 55;
pub const ABS_MT_BLOB_ID: u32 = 56;
pub const ABS_MT_TRACKING_ID: u32 = 57;
pub const ABS_MT_PRESSURE: u32 = 58;
pub const ABS_MT_DISTANCE: u32 = 59;
pub const ABS_MT_TOOL_X: u32 = 60;
pub const ABS_MT_TOOL_Y: u32 = 61;
pub const ABS_MAX: u32 = 63;
pub const ABS_CNT: u32 = 64;
pub const SW_LID: u32 = 0;
pub const SW_TABLET_MODE: u32 = 1;
pub const SW_HEADPHONE_INSERT: u32 = 2;
pub const SW_RFKILL_ALL: u32 = 3;
pub const SW_RADIO: u32 = 3;
pub const SW_MICROPHONE_INSERT: u32 = 4;
pub const SW_DOCK: u32 = 5;
pub const SW_LINEOUT_INSERT: u32 = 6;
pub const SW_JACK_PHYSICAL_INSERT: u32 = 7;
pub const SW_VIDEOOUT_INSERT: u32 = 8;
pub const SW_CAMERA_LENS_COVER: u32 = 9;
pub const SW_KEYPAD_SLIDE: u32 = 10;
pub const SW_FRONT_PROXIMITY: u32 = 11;
pub const SW_ROTATE_LOCK: u32 = 12;
pub const SW_LINEIN_INSERT: u32 = 13;
pub const SW_MUTE_DEVICE: u32 = 14;
pub const SW_PEN_INSERTED: u32 = 15;
pub const SW_MAX: u32 = 15;
pub const SW_CNT: u32 = 16;
pub const MSC_SERIAL: u32 = 0;
pub const MSC_PULSELED: u32 = 1;
pub const MSC_GESTURE: u32 = 2;
pub const MSC_RAW: u32 = 3;
pub const MSC_SCAN: u32 = 4;
pub const MSC_TIMESTAMP: u32 = 5;
pub const MSC_MAX: u32 = 7;
pub const MSC_CNT: u32 = 8;
pub const LED_NUML: u32 = 0;
pub const LED_CAPSL: u32 = 1;
pub const LED_SCROLLL: u32 = 2;
pub const LED_COMPOSE: u32 = 3;
pub const LED_KANA: u32 = 4;
pub const LED_SLEEP: u32 = 5;
pub const LED_SUSPEND: u32 = 6;
pub const LED_MUTE: u32 = 7;
pub const LED_MISC: u32 = 8;
pub const LED_MAIL: u32 = 9;
pub const LED_CHARGING: u32 = 10;
pub const LED_MAX: u32 = 15;
pub const LED_CNT: u32 = 16;
pub const REP_DELAY: u32 = 0;
pub const REP_PERIOD: u32 = 1;
pub const REP_MAX: u32 = 1;
pub const REP_CNT: u32 = 2;
pub const SND_CLICK: u32 = 0;
pub const SND_BELL: u32 = 1;
pub const SND_TONE: u32 = 2;
pub const SND_MAX: u32 = 7;
pub const SND_CNT: u32 = 8;
pub const EV_VERSION: u32 = 65537;
pub const INPUT_KEYMAP_BY_INDEX: u32 = 1;
pub const ID_BUS: u32 = 0;
pub const ID_VENDOR: u32 = 1;
pub const ID_PRODUCT: u32 = 2;
pub const ID_VERSION: u32 = 3;
pub const BUS_PCI: u32 = 1;
pub const BUS_ISAPNP: u32 = 2;
pub const BUS_USB: u32 = 3;
pub const BUS_HIL: u32 = 4;
pub const BUS_BLUETOOTH: u32 = 5;
pub const BUS_VIRTUAL: u32 = 6;
pub const BUS_ISA: u32 = 16;
pub const BUS_I8042: u32 = 17;
pub const BUS_XTKBD: u32 = 18;
pub const BUS_RS232: u32 = 19;
pub const BUS_GAMEPORT: u32 = 20;
pub const BUS_PARPORT: u32 = 21;
pub const BUS_AMIGA: u32 = 22;
pub const BUS_ADB: u32 = 23;
pub const BUS_I2C: u32 = 24;
pub const BUS_HOST: u32 = 25;
pub const BUS_GSC: u32 = 26;
pub const BUS_ATARI: u32 = 27;
pub const BUS_SPI: u32 = 28;
pub const BUS_RMI: u32 = 29;
pub const BUS_CEC: u32 = 30;
pub const BUS_INTEL_ISHTP: u32 = 31;
pub const MT_TOOL_FINGER: u32 = 0;
pub const MT_TOOL_PEN: u32 = 1;
pub const MT_TOOL_PALM: u32 = 2;
pub const MT_TOOL_MAX: u32 = 2;
pub const FF_STATUS_STOPPED: u32 = 0;
pub const FF_STATUS_PLAYING: u32 = 1;
pub const FF_STATUS_MAX: u32 = 1;
pub const FF_RUMBLE: u32 = 80;
pub const FF_PERIODIC: u32 = 81;
pub const FF_CONSTANT: u32 = 82;
pub const FF_SPRING: u32 = 83;
pub const FF_FRICTION: u32 = 84;
pub const FF_DAMPER: u32 = 85;
pub const FF_INERTIA: u32 = 86;
pub const FF_RAMP: u32 = 87;
pub const FF_EFFECT_MIN: u32 = 80;
pub const FF_EFFECT_MAX: u32 = 87;
pub const FF_SQUARE: u32 = 88;
pub const FF_TRIANGLE: u32 = 89;
pub const FF_SINE: u32 = 90;
pub const FF_SAW_UP: u32 = 91;
pub const FF_SAW_DOWN: u32 = 92;
pub const FF_CUSTOM: u32 = 93;
pub const FF_WAVEFORM_MIN: u32 = 88;
pub const FF_WAVEFORM_MAX: u32 = 93;
pub const FF_GAIN: u32 = 96;
pub const FF_AUTOCENTER: u32 = 97;
pub const FF_MAX_EFFECTS: u32 = 96;
pub const FF_MAX: u32 = 127;
pub const FF_CNT: u32 = 128;
pub const __GNUC_VA_LIST: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    assert_eq!(
        ::std::mem::size_of::<winsize>(),
        8usize,
        concat!("Size of: ", stringify!(winsize))
    );
    assert_eq!(
        ::std::mem::align_of::<winsize>(),
        2usize,
        concat!("Alignment of ", stringify!(winsize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_row as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_col as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_xpixel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_xpixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_ypixel as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_ypixel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termio {
    pub c_iflag: ::std::os::raw::c_ushort,
    pub c_oflag: ::std::os::raw::c_ushort,
    pub c_cflag: ::std::os::raw::c_ushort,
    pub c_lflag: ::std::os::raw::c_ushort,
    pub c_line: ::std::os::raw::c_uchar,
    pub c_cc: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_termio() {
    assert_eq!(
        ::std::mem::size_of::<termio>(),
        18usize,
        concat!("Size of: ", stringify!(termio))
    );
    assert_eq!(
        ::std::mem::align_of::<termio>(),
        2usize,
        concat!("Alignment of ", stringify!(termio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_iflag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_oflag as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_cflag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_lflag as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_line as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_cc as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cc)
        )
    );
}
extern "C" {
    pub fn ioctl(
        __fd: ::std::os::raw::c_int,
        __request: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_event {
    pub time: timeval,
    pub type_: __u16,
    pub code: __u16,
    pub value: __s32,
}
#[test]
fn bindgen_test_layout_input_event() {
    assert_eq!(
        ::std::mem::size_of::<input_event>(),
        24usize,
        concat!("Size of: ", stringify!(input_event))
    );
    assert_eq!(
        ::std::mem::align_of::<input_event>(),
        8usize,
        concat!("Alignment of ", stringify!(input_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_event>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(input_event),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_event>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(input_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_event>())).code as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(input_event),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_event>())).value as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(input_event),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_id {
    pub bustype: __u16,
    pub vendor: __u16,
    pub product: __u16,
    pub version: __u16,
}
#[test]
fn bindgen_test_layout_input_id() {
    assert_eq!(
        ::std::mem::size_of::<input_id>(),
        8usize,
        concat!("Size of: ", stringify!(input_id))
    );
    assert_eq!(
        ::std::mem::align_of::<input_id>(),
        2usize,
        concat!("Alignment of ", stringify!(input_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_id>())).bustype as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(input_id),
            "::",
            stringify!(bustype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_id>())).vendor as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(input_id),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_id>())).product as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(input_id),
            "::",
            stringify!(product)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_id>())).version as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(input_id),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_absinfo {
    pub value: __s32,
    pub minimum: __s32,
    pub maximum: __s32,
    pub fuzz: __s32,
    pub flat: __s32,
    pub resolution: __s32,
}
#[test]
fn bindgen_test_layout_input_absinfo() {
    assert_eq!(
        ::std::mem::size_of::<input_absinfo>(),
        24usize,
        concat!("Size of: ", stringify!(input_absinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<input_absinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(input_absinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_absinfo>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_absinfo>())).minimum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_absinfo>())).maximum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_absinfo>())).fuzz as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(fuzz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_absinfo>())).flat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(flat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_absinfo>())).resolution as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(resolution)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_keymap_entry {
    pub flags: __u8,
    pub len: __u8,
    pub index: __u16,
    pub keycode: __u32,
    pub scancode: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_input_keymap_entry() {
    assert_eq!(
        ::std::mem::size_of::<input_keymap_entry>(),
        40usize,
        concat!("Size of: ", stringify!(input_keymap_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<input_keymap_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(input_keymap_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_keymap_entry>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_keymap_entry>())).len as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_keymap_entry>())).index as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_keymap_entry>())).keycode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(keycode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_keymap_entry>())).scancode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(scancode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_mask {
    pub type_: __u32,
    pub codes_size: __u32,
    pub codes_ptr: __u64,
}
#[test]
fn bindgen_test_layout_input_mask() {
    assert_eq!(
        ::std::mem::size_of::<input_mask>(),
        16usize,
        concat!("Size of: ", stringify!(input_mask))
    );
    assert_eq!(
        ::std::mem::align_of::<input_mask>(),
        8usize,
        concat!("Alignment of ", stringify!(input_mask))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_mask>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(input_mask),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_mask>())).codes_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(input_mask),
            "::",
            stringify!(codes_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<input_mask>())).codes_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(input_mask),
            "::",
            stringify!(codes_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_replay {
    pub length: __u16,
    pub delay: __u16,
}
#[test]
fn bindgen_test_layout_ff_replay() {
    assert_eq!(
        ::std::mem::size_of::<ff_replay>(),
        4usize,
        concat!("Size of: ", stringify!(ff_replay))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_replay>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_replay))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_replay>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_replay),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_replay>())).delay as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_replay),
            "::",
            stringify!(delay)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_trigger {
    pub button: __u16,
    pub interval: __u16,
}
#[test]
fn bindgen_test_layout_ff_trigger() {
    assert_eq!(
        ::std::mem::size_of::<ff_trigger>(),
        4usize,
        concat!("Size of: ", stringify!(ff_trigger))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_trigger>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_trigger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_trigger>())).button as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_trigger),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_trigger>())).interval as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_trigger),
            "::",
            stringify!(interval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_envelope {
    pub attack_length: __u16,
    pub attack_level: __u16,
    pub fade_length: __u16,
    pub fade_level: __u16,
}
#[test]
fn bindgen_test_layout_ff_envelope() {
    assert_eq!(
        ::std::mem::size_of::<ff_envelope>(),
        8usize,
        concat!("Size of: ", stringify!(ff_envelope))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_envelope>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_envelope))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_envelope>())).attack_length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_envelope),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_envelope>())).attack_level as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_envelope),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_envelope>())).fade_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_envelope),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_envelope>())).fade_level as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_envelope),
            "::",
            stringify!(fade_level)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_constant_effect {
    pub level: __s16,
    pub envelope: ff_envelope,
}
#[test]
fn bindgen_test_layout_ff_constant_effect() {
    assert_eq!(
        ::std::mem::size_of::<ff_constant_effect>(),
        10usize,
        concat!("Size of: ", stringify!(ff_constant_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_constant_effect>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_constant_effect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_constant_effect>())).level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_constant_effect),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_constant_effect>())).envelope as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_constant_effect),
            "::",
            stringify!(envelope)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_ramp_effect {
    pub start_level: __s16,
    pub end_level: __s16,
    pub envelope: ff_envelope,
}
#[test]
fn bindgen_test_layout_ff_ramp_effect() {
    assert_eq!(
        ::std::mem::size_of::<ff_ramp_effect>(),
        12usize,
        concat!("Size of: ", stringify!(ff_ramp_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_ramp_effect>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_ramp_effect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_ramp_effect>())).start_level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_ramp_effect),
            "::",
            stringify!(start_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_ramp_effect>())).end_level as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_ramp_effect),
            "::",
            stringify!(end_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_ramp_effect>())).envelope as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_ramp_effect),
            "::",
            stringify!(envelope)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_condition_effect {
    pub right_saturation: __u16,
    pub left_saturation: __u16,
    pub right_coeff: __s16,
    pub left_coeff: __s16,
    pub deadband: __u16,
    pub center: __s16,
}
#[test]
fn bindgen_test_layout_ff_condition_effect() {
    assert_eq!(
        ::std::mem::size_of::<ff_condition_effect>(),
        12usize,
        concat!("Size of: ", stringify!(ff_condition_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_condition_effect>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_condition_effect))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ff_condition_effect>())).right_saturation as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(right_saturation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ff_condition_effect>())).left_saturation as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(left_saturation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_condition_effect>())).right_coeff as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(right_coeff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_condition_effect>())).left_coeff as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(left_coeff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_condition_effect>())).deadband as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(deadband)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_condition_effect>())).center as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(center)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_periodic_effect {
    pub waveform: __u16,
    pub period: __u16,
    pub magnitude: __s16,
    pub offset: __s16,
    pub phase: __u16,
    pub envelope: ff_envelope,
    pub custom_len: __u32,
    pub custom_data: *mut __s16,
}
#[test]
fn bindgen_test_layout_ff_periodic_effect() {
    assert_eq!(
        ::std::mem::size_of::<ff_periodic_effect>(),
        32usize,
        concat!("Size of: ", stringify!(ff_periodic_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_periodic_effect>(),
        8usize,
        concat!("Alignment of ", stringify!(ff_periodic_effect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_periodic_effect>())).waveform as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(waveform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_periodic_effect>())).period as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_periodic_effect>())).magnitude as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(magnitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_periodic_effect>())).offset as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_periodic_effect>())).phase as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_periodic_effect>())).envelope as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(envelope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_periodic_effect>())).custom_len as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(custom_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_periodic_effect>())).custom_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(custom_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_rumble_effect {
    pub strong_magnitude: __u16,
    pub weak_magnitude: __u16,
}
#[test]
fn bindgen_test_layout_ff_rumble_effect() {
    assert_eq!(
        ::std::mem::size_of::<ff_rumble_effect>(),
        4usize,
        concat!("Size of: ", stringify!(ff_rumble_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_rumble_effect>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_rumble_effect))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ff_rumble_effect>())).strong_magnitude as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_rumble_effect),
            "::",
            stringify!(strong_magnitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_rumble_effect>())).weak_magnitude as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_rumble_effect),
            "::",
            stringify!(weak_magnitude)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ff_effect {
    pub type_: __u16,
    pub id: __s16,
    pub direction: __u16,
    pub trigger: ff_trigger,
    pub replay: ff_replay,
    pub u: ff_effect__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ff_effect__bindgen_ty_1 {
    pub constant: ff_constant_effect,
    pub ramp: ff_ramp_effect,
    pub periodic: ff_periodic_effect,
    pub condition: [ff_condition_effect; 2usize],
    pub rumble: ff_rumble_effect,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_ff_effect__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ff_effect__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(ff_effect__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_effect__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ff_effect__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ff_effect__bindgen_ty_1>())).constant as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_effect__bindgen_ty_1>())).ramp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(ramp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ff_effect__bindgen_ty_1>())).periodic as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(periodic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ff_effect__bindgen_ty_1>())).condition as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_effect__bindgen_ty_1>())).rumble as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(rumble)
        )
    );
}
#[test]
fn bindgen_test_layout_ff_effect() {
    assert_eq!(
        ::std::mem::size_of::<ff_effect>(),
        48usize,
        concat!("Size of: ", stringify!(ff_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_effect>(),
        8usize,
        concat!("Alignment of ", stringify!(ff_effect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_effect>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_effect>())).id as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_effect>())).direction as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_effect>())).trigger as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(trigger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_effect>())).replay as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(replay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ff_effect>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(u)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[doc = " @ingroup init"]
#[doc = ""]
#[doc = " Opaque struct representing an evdev device."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libevdev {
    _unused: [u8; 0],
}
#[doc = "< Process data in sync mode"]
pub const libevdev_read_flag_LIBEVDEV_READ_FLAG_SYNC: libevdev_read_flag = 1;
#[doc = "< Process data in normal mode"]
pub const libevdev_read_flag_LIBEVDEV_READ_FLAG_NORMAL: libevdev_read_flag = 2;
#[doc = "< Pretend the next event is a SYN_DROPPED and"]
#[doc = "require the caller to sync"]
pub const libevdev_read_flag_LIBEVDEV_READ_FLAG_FORCE_SYNC: libevdev_read_flag = 4;
#[doc = "< The fd is not in O_NONBLOCK and a read may block"]
pub const libevdev_read_flag_LIBEVDEV_READ_FLAG_BLOCKING: libevdev_read_flag = 8;
#[doc = " @ingroup events"]
pub type libevdev_read_flag = u32;
extern "C" {
    #[doc = " @ingroup init"]
    #[doc = ""]
    #[doc = " Initialize a new libevdev device. This function only allocates the"]
    #[doc = " required memory and initializes the struct to sane default values."]
    #[doc = " To actually hook up the device to a kernel device, use"]
    #[doc = " libevdev_set_fd()."]
    #[doc = ""]
    #[doc = " Memory allocated through libevdev_new() must be released by the"]
    #[doc = " caller with libevdev_free()."]
    #[doc = ""]
    #[doc = " @see libevdev_set_fd"]
    #[doc = " @see libevdev_free"]
    pub fn libevdev_new() -> *mut libevdev;
}
extern "C" {
    #[doc = " @ingroup init"]
    #[doc = ""]
    #[doc = " Initialize a new libevdev device from the given fd."]
    #[doc = ""]
    #[doc = " This is a shortcut for"]
    #[doc = ""]
    #[doc = " @code"]
    #[doc = " int err;"]
    #[doc = " struct libevdev *dev = libevdev_new();"]
    #[doc = " err = libevdev_set_fd(dev, fd);"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @param fd A file descriptor to the device in O_RDWR or O_RDONLY mode."]
    #[doc = " @param[out] dev The newly initialized evdev device."]
    #[doc = ""]
    #[doc = " @return On success, 0 is returned and dev is set to the newly"]
    #[doc = " allocated struct. On failure, a negative errno is returned and the value"]
    #[doc = " of dev is undefined."]
    #[doc = ""]
    #[doc = " @see libevdev_free"]
    pub fn libevdev_new_from_fd(
        fd: ::std::os::raw::c_int,
        dev: *mut *mut libevdev,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup init"]
    #[doc = ""]
    #[doc = " Clean up and free the libevdev struct. After completion, the <code>struct"]
    #[doc = " libevdev</code> is invalid and must not be used."]
    #[doc = ""]
    #[doc = " Note that calling libevdev_free() does not close the file descriptor"]
    #[doc = " currently asssociated with this instance."]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd()."]
    pub fn libevdev_free(dev: *mut libevdev);
}
#[doc = "< critical errors and application bugs"]
pub const libevdev_log_priority_LIBEVDEV_LOG_ERROR: libevdev_log_priority = 10;
#[doc = "< informational messages"]
pub const libevdev_log_priority_LIBEVDEV_LOG_INFO: libevdev_log_priority = 20;
#[doc = "< debug information"]
pub const libevdev_log_priority_LIBEVDEV_LOG_DEBUG: libevdev_log_priority = 30;
#[doc = " @ingroup logging"]
pub type libevdev_log_priority = u32;
#[doc = " @ingroup logging"]
#[doc = ""]
#[doc = " Logging function called by library-internal logging."]
#[doc = " This function is expected to treat its input like printf would."]
#[doc = ""]
#[doc = " @param priority Log priority of this message"]
#[doc = " @param data User-supplied data pointer (see libevdev_set_log_function())"]
#[doc = " @param file libevdev source code file generating this message"]
#[doc = " @param line libevdev source code line generating this message"]
#[doc = " @param func libevdev source code function generating this message"]
#[doc = " @param format printf-style format string"]
#[doc = " @param args List of arguments"]
#[doc = ""]
#[doc = " @see libevdev_set_log_function"]
pub type libevdev_log_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        priority: libevdev_log_priority,
        data: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ),
>;
extern "C" {
    #[doc = " @ingroup logging"]
    #[doc = ""]
    #[doc = " Set a printf-style logging handler for library-internal logging. The default"]
    #[doc = " logging function is to stdout."]
    #[doc = ""]
    #[doc = " @note The global log handler is only called if no context-specific log"]
    #[doc = " handler has been set with libevdev_set_device_log_function()."]
    #[doc = ""]
    #[doc = " @param logfunc The logging function for this device. If NULL, the current"]
    #[doc = " logging function is unset and no logging is performed."]
    #[doc = " @param data User-specific data passed to the log handler."]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd()."]
    #[doc = ""]
    #[doc = " @deprecated Use per-context logging instead, see"]
    #[doc = " libevdev_set_device_log_function()."]
    pub fn libevdev_set_log_function(
        logfunc: libevdev_log_func_t,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " @ingroup logging"]
    #[doc = ""]
    #[doc = " Define the minimum level to be printed to the log handler."]
    #[doc = " Messages higher than this level are printed, others are discarded. This"]
    #[doc = " is a global setting and applies to any future logging messages."]
    #[doc = ""]
    #[doc = " @param priority Minimum priority to be printed to the log."]
    #[doc = ""]
    #[doc = " @deprecated Use per-context logging instead, see"]
    #[doc = " libevdev_set_device_log_function()."]
    pub fn libevdev_set_log_priority(priority: libevdev_log_priority);
}
extern "C" {
    #[doc = " @ingroup logging"]
    #[doc = ""]
    #[doc = " Return the current log priority level. Messages higher than this level"]
    #[doc = " are printed, others are discarded. This is a global setting."]
    #[doc = ""]
    #[doc = " @return the current log level"]
    #[doc = ""]
    #[doc = " @deprecated Use per-context logging instead, see"]
    #[doc = " libevdev_set_device_log_function()."]
    pub fn libevdev_get_log_priority() -> libevdev_log_priority;
}
#[doc = " @ingroup logging"]
#[doc = ""]
#[doc = " Logging function called by library-internal logging for a specific"]
#[doc = " libevdev context. This function is expected to treat its input like"]
#[doc = " printf would."]
#[doc = ""]
#[doc = " @param dev The evdev device"]
#[doc = " @param priority Log priority of this message"]
#[doc = " @param data User-supplied data pointer (see libevdev_set_log_function())"]
#[doc = " @param file libevdev source code file generating this message"]
#[doc = " @param line libevdev source code line generating this message"]
#[doc = " @param func libevdev source code function generating this message"]
#[doc = " @param format printf-style format string"]
#[doc = " @param args List of arguments"]
#[doc = ""]
#[doc = " @see libevdev_set_log_function"]
#[doc = " @since 1.3"]
pub type libevdev_device_log_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        dev: *const libevdev,
        priority: libevdev_log_priority,
        data: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ),
>;
extern "C" {
    #[doc = " @ingroup logging"]
    #[doc = ""]
    #[doc = " Set a printf-style logging handler for library-internal logging for this"]
    #[doc = " device context. The default logging function is NULL, i.e. the global log"]
    #[doc = " handler is invoked. If a context-specific log handler is set, the global"]
    #[doc = " log handler is not invoked for this device."]
    #[doc = ""]
    #[doc = " @note This log function applies for this device context only, even if"]
    #[doc = " another context exists for the same fd."]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param logfunc The logging function for this device. If NULL, the current"]
    #[doc = " logging function is unset and logging falls back to the global log"]
    #[doc = " handler, if any."]
    #[doc = " @param priority Minimum priority to be printed to the log."]
    #[doc = " @param data User-specific data passed to the log handler."]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd()."]
    #[doc = " @since 1.3"]
    pub fn libevdev_set_device_log_function(
        dev: *mut libevdev,
        logfunc: libevdev_device_log_func_t,
        priority: libevdev_log_priority,
        data: *mut ::std::os::raw::c_void,
    );
}
#[doc = "< Grab the device if not currently grabbed"]
pub const libevdev_grab_mode_LIBEVDEV_GRAB: libevdev_grab_mode = 3;
#[doc = "< Ungrab the device if currently grabbed"]
pub const libevdev_grab_mode_LIBEVDEV_UNGRAB: libevdev_grab_mode = 4;
#[doc = " @ingroup init"]
pub type libevdev_grab_mode = u32;
extern "C" {
    #[doc = " @ingroup init"]
    #[doc = ""]
    #[doc = " Grab or ungrab the device through a kernel EVIOCGRAB. This prevents other"]
    #[doc = " clients (including kernel-internal ones such as rfkill) from receiving"]
    #[doc = " events from this device."]
    #[doc = ""]
    #[doc = " This is generally a bad idea. Don't do this."]
    #[doc = ""]
    #[doc = " Grabbing an already grabbed device, or ungrabbing an ungrabbed device is"]
    #[doc = " a noop and always succeeds."]
    #[doc = ""]
    #[doc = " A grab is an operation tied to a file descriptor, not a device. If a"]
    #[doc = " client changes the file descriptor with libevdev_change_fd(), it must"]
    #[doc = " also re-issue a grab with libevdev_grab()."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param grab If true, grab the device. Otherwise ungrab the device."]
    #[doc = ""]
    #[doc = " @return 0 if the device was successfully grabbed or ungrabbed, or a"]
    #[doc = " negative errno in case of failure."]
    pub fn libevdev_grab(dev: *mut libevdev, grab: libevdev_grab_mode) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup init"]
    #[doc = ""]
    #[doc = " Set the fd for this struct and initialize internal data."]
    #[doc = " The fd must be in O_RDONLY or O_RDWR mode."]
    #[doc = ""]
    #[doc = " This function may only be called once per device. If the device changed and"]
    #[doc = " you need to re-read a device, use libevdev_free() and libevdev_new(). If"]
    #[doc = " you need to change the fd after closing and re-opening the same device, use"]
    #[doc = " libevdev_change_fd()."]
    #[doc = ""]
    #[doc = " A caller should ensure that any events currently pending on the fd are"]
    #[doc = " drained before the file descriptor is passed to libevdev for"]
    #[doc = " initialization. Due to how the kernel's ioctl handling works, the initial"]
    #[doc = " device state will reflect the current device state *after* applying all"]
    #[doc = " events currently pending on the fd. Thus, if the fd is not drained, the"]
    #[doc = " state visible to the caller will be inconsistent with the events"]
    #[doc = " immediately available on the device. This does not affect state-less"]
    #[doc = " events like EV_REL."]
    #[doc = ""]
    #[doc = " Unless otherwise specified, libevdev function behavior is undefined until"]
    #[doc = " a successful call to libevdev_set_fd()."]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param fd The file descriptor for the device"]
    #[doc = ""]
    #[doc = " @return 0 on success, or a negative errno on failure"]
    #[doc = ""]
    #[doc = " @see libevdev_change_fd"]
    #[doc = " @see libevdev_new"]
    #[doc = " @see libevdev_free"]
    pub fn libevdev_set_fd(dev: *mut libevdev, fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup init"]
    #[doc = ""]
    #[doc = " Change the fd for this device, without re-reading the actual device. If the fd"]
    #[doc = " changes after initializing the device, for example after a VT-switch in the"]
    #[doc = " X.org X server, this function updates the internal fd to the newly opened."]
    #[doc = " No check is made that new fd points to the same device. If the device has"]
    #[doc = " changed, libevdev's behavior is undefined."]
    #[doc = ""]
    #[doc = " libevdev does not sync itself after changing the fd and keeps the current"]
    #[doc = " device state. Use libevdev_next_event with the"]
    #[doc = " @ref LIBEVDEV_READ_FLAG_FORCE_SYNC flag to force a re-sync."]
    #[doc = ""]
    #[doc = " The example code below illustrates how to force a re-sync of the"]
    #[doc = " library-internal state. Note that this code doesn't handle the events in"]
    #[doc = " the caller, it merely forces an update of the internal library state."]
    #[doc = " @code"]
    #[doc = "     struct input_event ev;"]
    #[doc = "     libevdev_change_fd(dev, new_fd);"]
    #[doc = "     libevdev_next_event(dev, LIBEVDEV_READ_FLAG_FORCE_SYNC, &ev);"]
    #[doc = "     while (libevdev_next_event(dev, LIBEVDEV_READ_FLAG_SYNC, &ev) == LIBEVDEV_READ_STATUS_SYNC)"]
    #[doc = "                             ; // noop"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " The fd may be open in O_RDONLY or O_RDWR."]
    #[doc = ""]
    #[doc = " After changing the fd, the device is assumed ungrabbed and a caller must"]
    #[doc = " call libevdev_grab() again."]
    #[doc = ""]
    #[doc = " It is an error to call this function before calling libevdev_set_fd()."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param fd The new fd"]
    #[doc = ""]
    #[doc = " @return 0 on success, or -1 on failure."]
    #[doc = ""]
    #[doc = " @see libevdev_set_fd"]
    pub fn libevdev_change_fd(
        dev: *mut libevdev,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup init"]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = ""]
    #[doc = " @return The previously set fd, or -1 if none had been set previously."]
    #[doc = " @note This function may be called before libevdev_set_fd()."]
    pub fn libevdev_get_fd(dev: *const libevdev) -> ::std::os::raw::c_int;
}
#[doc = " libevdev_next_event() has finished without an error"]
#[doc = " and an event is available for processing."]
#[doc = ""]
#[doc = " @see libevdev_next_event"]
pub const libevdev_read_status_LIBEVDEV_READ_STATUS_SUCCESS: libevdev_read_status = 0;
#[doc = " Depending on the libevdev_next_event() read flag:"]
#[doc = " * libevdev received a SYN_DROPPED from the device, and the caller should"]
#[doc = " now resync the device, or,"]
#[doc = " * an event has been read in sync mode."]
#[doc = ""]
#[doc = " @see libevdev_next_event"]
pub const libevdev_read_status_LIBEVDEV_READ_STATUS_SYNC: libevdev_read_status = 1;
#[doc = " @ingroup events"]
pub type libevdev_read_status = u32;
extern "C" {
    #[doc = " @ingroup events"]
    #[doc = ""]
    #[doc = " Get the next event from the device. This function operates in two different"]
    #[doc = " modes: normal mode or sync mode."]
    #[doc = ""]
    #[doc = " In normal mode (when flags has @ref LIBEVDEV_READ_FLAG_NORMAL set), this"]
    #[doc = " function returns @ref LIBEVDEV_READ_STATUS_SUCCESS and returns the event"]
    #[doc = " in the argument @p ev. If no events are available at this"]
    #[doc = " time, it returns -EAGAIN and ev is undefined."]
    #[doc = ""]
    #[doc = " If the current event is an EV_SYN SYN_DROPPED event, this function returns"]
    #[doc = " @ref LIBEVDEV_READ_STATUS_SYNC and ev is set to the EV_SYN event."]
    #[doc = " The caller should now call this function with the"]
    #[doc = " @ref LIBEVDEV_READ_FLAG_SYNC flag set, to get the set of events that make up the"]
    #[doc = " device state delta. This function returns @ref LIBEVDEV_READ_STATUS_SYNC for"]
    #[doc = " each event part of that delta, until it returns -EAGAIN once all events"]
    #[doc = " have been synced. For more details on what libevdev does to sync after a"]
    #[doc = " SYN_DROPPED event, see @ref syn_dropped."]
    #[doc = ""]
    #[doc = " If a device needs to be synced by the caller but the caller does not call"]
    #[doc = " with the @ref LIBEVDEV_READ_FLAG_SYNC flag set, all events from the diff are"]
    #[doc = " dropped after libevdev updates its internal state and event processing"]
    #[doc = " continues as normal. Note that the current slot and the state of touch"]
    #[doc = " points may have updated during the SYN_DROPPED event, it is strongly"]
    #[doc = " recommended that a caller ignoring all sync events calls"]
    #[doc = " libevdev_get_current_slot() and checks the ABS_MT_TRACKING_ID values for"]
    #[doc = " all slots."]
    #[doc = ""]
    #[doc = " If a device has changed state without events being enqueued in libevdev,"]
    #[doc = " e.g. after changing the file descriptor, use the @ref"]
    #[doc = " LIBEVDEV_READ_FLAG_FORCE_SYNC flag. This triggers an internal sync of the"]
    #[doc = " device and libevdev_next_event() returns @ref LIBEVDEV_READ_STATUS_SYNC."]
    #[doc = " Any state changes are available as events as described above. If"]
    #[doc = " @ref LIBEVDEV_READ_FLAG_FORCE_SYNC is set, the value of ev is undefined."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param flags Set of flags to determine behaviour. If @ref LIBEVDEV_READ_FLAG_NORMAL"]
    #[doc = " is set, the next event is read in normal mode. If @ref LIBEVDEV_READ_FLAG_SYNC is"]
    #[doc = " set, the next event is read in sync mode."]
    #[doc = " @param ev On success, set to the current event."]
    #[doc = " @return On failure, a negative errno is returned."]
    #[doc = " @retval LIBEVDEV_READ_STATUS_SUCCESS One or more events were read of the"]
    #[doc = " device and ev points to the next event in the queue"]
    #[doc = " @retval -EAGAIN No events are currently available on the device"]
    #[doc = " @retval LIBEVDEV_READ_STATUS_SYNC A SYN_DROPPED event was received, or a"]
    #[doc = " synced event was returned and ev points to the SYN_DROPPED event"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_next_event(
        dev: *mut libevdev,
        flags: ::std::os::raw::c_uint,
        ev: *mut input_event,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup events"]
    #[doc = ""]
    #[doc = " Check if there are events waiting for us. This function does not read an"]
    #[doc = " event off the fd and may not access the fd at all. If there are events"]
    #[doc = " queued internally this function will return non-zero. If the internal"]
    #[doc = " queue is empty, this function will poll the file descriptor for data."]
    #[doc = ""]
    #[doc = " This is a convenience function for simple processes, most complex programs"]
    #[doc = " are expected to use select(2) or poll(2) on the file descriptor. The kernel"]
    #[doc = " guarantees that if data is available, it is a multiple of sizeof(struct"]
    #[doc = " input_event), and thus calling libevdev_next_event() when select(2) or"]
    #[doc = " poll(2) return is safe. You do not need libevdev_has_event_pending() if"]
    #[doc = " you're using select(2) or poll(2)."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @return On failure, a negative errno is returned."]
    #[doc = " @retval 0 No event is currently available"]
    #[doc = " @retval 1 One or more events are available on the fd"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_has_event_pending(dev: *mut libevdev) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Retrieve the device's name, either as set by the caller or as read from"]
    #[doc = " the kernel. The string returned is valid until libevdev_free() or until"]
    #[doc = " libevdev_set_name(), whichever comes earlier."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return The device name as read off the kernel device. The name is never"]
    #[doc = " NULL but it may be the empty string."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_name(dev: *const libevdev) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Change the device's name as returned by libevdev_get_name(). This"]
    #[doc = " function destroys the string previously returned by libevdev_get_name(),"]
    #[doc = " a caller must take care that no references are kept."]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param name The new, non-NULL, name to assign to this device."]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd(). A call to"]
    #[doc = " libevdev_set_fd() will overwrite any previously set value."]
    pub fn libevdev_set_name(dev: *mut libevdev, name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Retrieve the device's physical location, either as set by the caller or"]
    #[doc = " as read from the kernel. The string returned is valid until"]
    #[doc = " libevdev_free() or until libevdev_set_phys(), whichever comes earlier."]
    #[doc = ""]
    #[doc = " Virtual devices such as uinput devices have no phys location."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return The physical location of this device, or NULL if there is none"]
    #[doc = ""]
    #[doc = " @note This function is signal safe."]
    pub fn libevdev_get_phys(dev: *const libevdev) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Change the device's physical location as returned by libevdev_get_phys()."]
    #[doc = " This function destroys the string previously returned by"]
    #[doc = " libevdev_get_phys(), a caller must take care that no references are kept."]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param phys The new phys to assign to this device."]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd(). A call to"]
    #[doc = " libevdev_set_fd() will overwrite any previously set value."]
    pub fn libevdev_set_phys(dev: *mut libevdev, phys: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Retrieve the device's unique identifier, either as set by the caller or"]
    #[doc = " as read from the kernel. The string returned is valid until"]
    #[doc = " libevdev_free() or until libevdev_set_uniq(), whichever comes earlier."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return The unique identifier for this device, or NULL if there is none"]
    #[doc = ""]
    #[doc = " @note This function is signal safe."]
    pub fn libevdev_get_uniq(dev: *const libevdev) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Change the device's unique identifier as returned by libevdev_get_uniq()."]
    #[doc = " This function destroys the string previously returned by"]
    #[doc = " libevdev_get_uniq(), a caller must take care that no references are kept."]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param uniq The new uniq to assign to this device."]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd(). A call to"]
    #[doc = " libevdev_set_fd() will overwrite any previously set value."]
    pub fn libevdev_set_uniq(dev: *mut libevdev, uniq: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return The device's product ID"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_id_product(dev: *const libevdev) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param product_id The product ID to assign to this device"]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd(). A call to"]
    #[doc = " libevdev_set_fd() will overwrite any previously set value."]
    pub fn libevdev_set_id_product(dev: *mut libevdev, product_id: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return The device's vendor ID"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_id_vendor(dev: *const libevdev) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param vendor_id The vendor ID to assign to this device"]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd(). A call to"]
    #[doc = " libevdev_set_fd() will overwrite any previously set value."]
    pub fn libevdev_set_id_vendor(dev: *mut libevdev, vendor_id: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return The device's bus type"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_id_bustype(dev: *const libevdev) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param bustype The bustype to assign to this device"]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd(). A call to"]
    #[doc = " libevdev_set_fd() will overwrite any previously set value."]
    pub fn libevdev_set_id_bustype(dev: *mut libevdev, bustype: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return The device's firmware version"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_id_version(dev: *const libevdev) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param version The version to assign to this device"]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd(). A call to"]
    #[doc = " libevdev_set_fd() will overwrite any previously set value."]
    pub fn libevdev_set_id_version(dev: *mut libevdev, version: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return The driver version for this device"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_driver_version(dev: *const libevdev) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param prop The input property to query for, one of INPUT_PROP_..."]
    #[doc = ""]
    #[doc = " @return 1 if the device provides this input property, or 0 otherwise."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe"]
    pub fn libevdev_has_property(
        dev: *const libevdev,
        prop: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " @param dev The evdev device"]
    #[doc = " @param prop The input property to enable, one of INPUT_PROP_..."]
    #[doc = ""]
    #[doc = " @return 0 on success or -1 on failure"]
    #[doc = ""]
    #[doc = " @note This function may be called before libevdev_set_fd(). A call to"]
    #[doc = " libevdev_set_fd() will overwrite any previously set value."]
    pub fn libevdev_enable_property(
        dev: *mut libevdev,
        prop: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param type The event type to query for, one of EV_SYN, EV_REL, etc."]
    #[doc = ""]
    #[doc = " @return 1 if the device supports this event type, or 0 otherwise."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_has_event_type(
        dev: *const libevdev,
        type_: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param type The event type for the code to query (EV_SYN, EV_REL, etc.)"]
    #[doc = " @param code The event code to query for, one of ABS_X, REL_X, etc."]
    #[doc = ""]
    #[doc = " @return 1 if the device supports this event type and code, or 0 otherwise."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_has_event_code(
        dev: *const libevdev,
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Get the minimum axis value for the given axis, as advertised by the kernel."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code The EV_ABS event code to query for, one of ABS_X, ABS_Y, etc."]
    #[doc = ""]
    #[doc = " @return axis minimum for the given axis or 0 if the axis is invalid"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_abs_minimum(
        dev: *const libevdev,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Get the maximum axis value for the given axis, as advertised by the kernel."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code The EV_ABS event code to query for, one of ABS_X, ABS_Y, etc."]
    #[doc = ""]
    #[doc = " @return axis maximum for the given axis or 0 if the axis is invalid"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_abs_maximum(
        dev: *const libevdev,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Get the axis fuzz for the given axis, as advertised by the kernel."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code The EV_ABS event code to query for, one of ABS_X, ABS_Y, etc."]
    #[doc = ""]
    #[doc = " @return axis fuzz for the given axis or 0 if the axis is invalid"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_abs_fuzz(
        dev: *const libevdev,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Get the axis flat for the given axis, as advertised by the kernel."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code The EV_ABS event code to query for, one of ABS_X, ABS_Y, etc."]
    #[doc = ""]
    #[doc = " @return axis flat for the given axis or 0 if the axis is invalid"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_abs_flat(
        dev: *const libevdev,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Get the axis resolution for the given axis, as advertised by the kernel."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code The EV_ABS event code to query for, one of ABS_X, ABS_Y, etc."]
    #[doc = ""]
    #[doc = " @return axis resolution for the given axis or 0 if the axis is invalid"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_abs_resolution(
        dev: *const libevdev,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Get the axis info for the given axis, as advertised by the kernel."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code The EV_ABS event code to query for, one of ABS_X, ABS_Y, etc."]
    #[doc = ""]
    #[doc = " @return The input_absinfo for the given code, or NULL if the device does"]
    #[doc = " not support this event code."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_abs_info(
        dev: *const libevdev,
        code: ::std::os::raw::c_uint,
    ) -> *const input_absinfo;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Behaviour of this function is undefined if the device does not provide"]
    #[doc = " the event."]
    #[doc = ""]
    #[doc = " If the device supports ABS_MT_SLOT, the value returned for any ABS_MT_*"]
    #[doc = " event code is the value of the currently active slot. You should use"]
    #[doc = " libevdev_get_slot_value() instead."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param type The event type for the code to query (EV_SYN, EV_REL, etc.)"]
    #[doc = " @param code The event code to query for, one of ABS_X, REL_X, etc."]
    #[doc = ""]
    #[doc = " @return The current value of the event."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    #[doc = " @note The value for ABS_MT_ events is undefined, use"]
    #[doc = " libevdev_get_slot_value() instead"]
    #[doc = ""]
    #[doc = " @see libevdev_get_slot_value"]
    pub fn libevdev_get_event_value(
        dev: *const libevdev,
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Set the value for a given event type and code. This only makes sense for"]
    #[doc = " some event types, e.g. setting the value for EV_REL is pointless."]
    #[doc = ""]
    #[doc = " This is a local modification only affecting only this representation of"]
    #[doc = " this device. A future call to libevdev_get_event_value() will return this"]
    #[doc = " value, unless the value was overwritten by an event."]
    #[doc = ""]
    #[doc = " If the device supports ABS_MT_SLOT, the value set for any ABS_MT_*"]
    #[doc = " event code is the value of the currently active slot. You should use"]
    #[doc = " libevdev_set_slot_value() instead."]
    #[doc = ""]
    #[doc = " If the device supports ABS_MT_SLOT and the type is EV_ABS and the code is"]
    #[doc = " ABS_MT_SLOT, the value must be a positive number less then the number of"]
    #[doc = " slots on the device. Otherwise, libevdev_set_event_value() returns -1."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param type The event type for the code to query (EV_SYN, EV_REL, etc.)"]
    #[doc = " @param code The event code to set the value for, one of ABS_X, LED_NUML, etc."]
    #[doc = " @param value The new value to set"]
    #[doc = ""]
    #[doc = " @return 0 on success, or -1 on failure."]
    #[doc = " @retval -1 the device does not have the event type or code enabled, or the code is outside the"]
    #[doc = " allowed limits for the given type, or the type cannot be set, or the"]
    #[doc = " value is not permitted for the given code."]
    #[doc = ""]
    #[doc = " @see libevdev_set_slot_value"]
    #[doc = " @see libevdev_get_event_value"]
    pub fn libevdev_set_event_value(
        dev: *mut libevdev,
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Fetch the current value of the event type. This is a shortcut for"]
    #[doc = ""]
    #[doc = " @code"]
    #[doc = "   if (libevdev_has_event_type(dev, t) && libevdev_has_event_code(dev, t, c))"]
    #[doc = "        val = libevdev_get_event_value(dev, t, c);"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param type The event type for the code to query (EV_SYN, EV_REL, etc.)"]
    #[doc = " @param code The event code to query for, one of ABS_X, REL_X, etc."]
    #[doc = " @param[out] value The current value of this axis returned."]
    #[doc = ""]
    #[doc = " @return If the device supports this event type and code, the return value is"]
    #[doc = " non-zero and value is set to the current value of this axis. Otherwise,"]
    #[doc = " 0 is returned and value is unmodified."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    #[doc = " @note The value for ABS_MT_ events is undefined, use"]
    #[doc = " libevdev_fetch_slot_value() instead"]
    #[doc = ""]
    #[doc = " @see libevdev_fetch_slot_value"]
    pub fn libevdev_fetch_event_value(
        dev: *const libevdev,
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup mt"]
    #[doc = ""]
    #[doc = " Return the current value of the code for the given slot."]
    #[doc = ""]
    #[doc = " The return value is undefined for a slot exceeding the available slots on"]
    #[doc = " the device, for a code that is not in the permitted ABS_MT range or for a"]
    #[doc = " device that does not have slots."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param slot The numerical slot number, must be smaller than the total number"]
    #[doc = " of slots on this device"]
    #[doc = " @param code The event code to query for, one of ABS_MT_POSITION_X, etc."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    #[doc = " @note The value for events other than ABS_MT_ is undefined, use"]
    #[doc = " libevdev_fetch_value() instead"]
    #[doc = ""]
    #[doc = " @see libevdev_get_event_value"]
    pub fn libevdev_get_slot_value(
        dev: *const libevdev,
        slot: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Set the value for a given code for the given slot."]
    #[doc = ""]
    #[doc = " This is a local modification only affecting only this representation of"]
    #[doc = " this device. A future call to libevdev_get_slot_value() will return this"]
    #[doc = " value, unless the value was overwritten by an event."]
    #[doc = ""]
    #[doc = " This function does not set event values for axes outside the ABS_MT range,"]
    #[doc = " use libevdev_set_event_value() instead."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param slot The numerical slot number, must be smaller than the total number"]
    #[doc = " of slots on this device"]
    #[doc = " @param code The event code to set the value for, one of ABS_MT_POSITION_X, etc."]
    #[doc = " @param value The new value to set"]
    #[doc = ""]
    #[doc = " @return 0 on success, or -1 on failure."]
    #[doc = " @retval -1 the device does not have the event code enabled, or the code is"]
    #[doc = " outside the allowed limits for multitouch events, or the slot number is outside"]
    #[doc = " the limits for this device, or the device does not support multitouch events."]
    #[doc = ""]
    #[doc = " @see libevdev_set_event_value"]
    #[doc = " @see libevdev_get_slot_value"]
    pub fn libevdev_set_slot_value(
        dev: *mut libevdev,
        slot: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup mt"]
    #[doc = ""]
    #[doc = " Fetch the current value of the code for the given slot. This is a shortcut for"]
    #[doc = ""]
    #[doc = " @code"]
    #[doc = "   if (libevdev_has_event_type(dev, EV_ABS) &&"]
    #[doc = "       libevdev_has_event_code(dev, EV_ABS, c) &&"]
    #[doc = "       slot < device->number_of_slots)"]
    #[doc = "       val = libevdev_get_slot_value(dev, slot, c);"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param slot The numerical slot number, must be smaller than the total number"]
    #[doc = " of slots on this * device"]
    #[doc = " @param[out] value The current value of this axis returned."]
    #[doc = ""]
    #[doc = " @param code The event code to query for, one of ABS_MT_POSITION_X, etc."]
    #[doc = " @return If the device supports this event code, the return value is"]
    #[doc = " non-zero and value is set to the current value of this axis. Otherwise, or"]
    #[doc = " if the event code is not an ABS_MT_* event code, 0 is returned and value"]
    #[doc = " is unmodified."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_fetch_slot_value(
        dev: *const libevdev,
        slot: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup mt"]
    #[doc = ""]
    #[doc = " Get the number of slots supported by this device."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return The number of slots supported, or -1 if the device does not provide"]
    #[doc = " any slots"]
    #[doc = ""]
    #[doc = " @note A device may provide ABS_MT_SLOT but a total number of 0 slots. Hence"]
    #[doc = " the return value of -1 for \"device does not provide slots at all\""]
    pub fn libevdev_get_num_slots(dev: *const libevdev) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup mt"]
    #[doc = ""]
    #[doc = " Get the currently active slot. This may differ from the value"]
    #[doc = " an ioctl may return at this time as events may have been read off the fd"]
    #[doc = " since changing the slot value but those events are still in the buffer"]
    #[doc = " waiting to be processed. The returned value is the value a caller would"]
    #[doc = " see if it were to process events manually one-by-one."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = ""]
    #[doc = " @return the currently active slot (logically)"]
    #[doc = ""]
    #[doc = " @note This function is signal-safe."]
    pub fn libevdev_get_current_slot(dev: *const libevdev) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Change the minimum for the given EV_ABS event code, if the code exists."]
    #[doc = " This function has no effect if libevdev_has_event_code() returns false for"]
    #[doc = " this code."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code One of ABS_X, ABS_Y, ..."]
    #[doc = " @param min The new minimum for this axis"]
    pub fn libevdev_set_abs_minimum(
        dev: *mut libevdev,
        code: ::std::os::raw::c_uint,
        min: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Change the maximum for the given EV_ABS event code, if the code exists."]
    #[doc = " This function has no effect if libevdev_has_event_code() returns false for"]
    #[doc = " this code."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code One of ABS_X, ABS_Y, ..."]
    #[doc = " @param max The new maxium for this axis"]
    pub fn libevdev_set_abs_maximum(
        dev: *mut libevdev,
        code: ::std::os::raw::c_uint,
        max: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Change the fuzz for the given EV_ABS event code, if the code exists."]
    #[doc = " This function has no effect if libevdev_has_event_code() returns false for"]
    #[doc = " this code."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code One of ABS_X, ABS_Y, ..."]
    #[doc = " @param fuzz The new fuzz for this axis"]
    pub fn libevdev_set_abs_fuzz(
        dev: *mut libevdev,
        code: ::std::os::raw::c_uint,
        fuzz: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Change the flat for the given EV_ABS event code, if the code exists."]
    #[doc = " This function has no effect if libevdev_has_event_code() returns false for"]
    #[doc = " this code."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code One of ABS_X, ABS_Y, ..."]
    #[doc = " @param flat The new flat for this axis"]
    pub fn libevdev_set_abs_flat(
        dev: *mut libevdev,
        code: ::std::os::raw::c_uint,
        flat: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Change the resolution for the given EV_ABS event code, if the code exists."]
    #[doc = " This function has no effect if libevdev_has_event_code() returns false for"]
    #[doc = " this code."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code One of ABS_X, ABS_Y, ..."]
    #[doc = " @param resolution The new axis resolution"]
    pub fn libevdev_set_abs_resolution(
        dev: *mut libevdev,
        code: ::std::os::raw::c_uint,
        resolution: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Change the abs info for the given EV_ABS event code, if the code exists."]
    #[doc = " This function has no effect if libevdev_has_event_code() returns false for"]
    #[doc = " this code."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code One of ABS_X, ABS_Y, ..."]
    #[doc = " @param abs The new absolute axis data (min, max, fuzz, flat, resolution)"]
    pub fn libevdev_set_abs_info(
        dev: *mut libevdev,
        code: ::std::os::raw::c_uint,
        abs: *const input_absinfo,
    );
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Forcibly enable an event type on this device, even if the underlying"]
    #[doc = " device does not support it. While this cannot make the device actually"]
    #[doc = " report such events, it will now return true for libevdev_has_event_type()."]
    #[doc = ""]
    #[doc = " This is a local modification only affecting only this representation of"]
    #[doc = " this device."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param type The event type to enable (EV_ABS, EV_KEY, ...)"]
    #[doc = ""]
    #[doc = " @return 0 on success or -1 otherwise"]
    #[doc = ""]
    #[doc = " @see libevdev_has_event_type"]
    pub fn libevdev_enable_event_type(
        dev: *mut libevdev,
        type_: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Forcibly disable an event type on this device, even if the underlying"]
    #[doc = " device provides it. This effectively mutes the respective set of"]
    #[doc = " events. libevdev will filter any events matching this type and none will"]
    #[doc = " reach the caller. libevdev_has_event_type() will return false for this"]
    #[doc = " type."]
    #[doc = ""]
    #[doc = " In most cases, a caller likely only wants to disable a single code, not"]
    #[doc = " the whole type. Use libevdev_disable_event_code() for that."]
    #[doc = ""]
    #[doc = " Disabling EV_SYN will not work. Don't shoot yourself in the foot."]
    #[doc = " It hurts."]
    #[doc = ""]
    #[doc = " This is a local modification only affecting only this representation of"]
    #[doc = " this device."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param type The event type to disable (EV_ABS, EV_KEY, ...)"]
    #[doc = ""]
    #[doc = " @return 0 on success or -1 otherwise"]
    #[doc = ""]
    #[doc = " @see libevdev_has_event_type"]
    #[doc = " @see libevdev_disable_event_type"]
    pub fn libevdev_disable_event_type(
        dev: *mut libevdev,
        type_: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Forcibly enable an event code on this device, even if the underlying"]
    #[doc = " device does not support it. While this cannot make the device actually"]
    #[doc = " report such events, it will now return true for libevdev_has_event_code()."]
    #[doc = ""]
    #[doc = " The last argument depends on the type and code:"]
    #[doc = " - If type is EV_ABS, data must be a pointer to a struct input_absinfo"]
    #[doc = "   containing the data for this axis."]
    #[doc = " - If type is EV_REP, data must be a pointer to a int containing the data"]
    #[doc = "   for this axis"]
    #[doc = " - For all other types, the argument must be NULL."]
    #[doc = ""]
    #[doc = " This function calls libevdev_enable_event_type() if necessary."]
    #[doc = ""]
    #[doc = " This is a local modification only affecting only this representation of"]
    #[doc = " this device."]
    #[doc = ""]
    #[doc = " If this function is called with a type of EV_ABS and EV_REP on a device"]
    #[doc = " that already has the given event code enabled, the values in data"]
    #[doc = " overwrite the previous values."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param type The event type to enable (EV_ABS, EV_KEY, ...)"]
    #[doc = " @param code The event code to enable (ABS_X, REL_X, etc.)"]
    #[doc = " @param data If type is EV_ABS, data points to a struct input_absinfo. If type is EV_REP, data"]
    #[doc = " points to an integer. Otherwise, data must be NULL."]
    #[doc = ""]
    #[doc = " @return 0 on success or -1 otherwise"]
    #[doc = ""]
    #[doc = " @see libevdev_enable_event_type"]
    pub fn libevdev_enable_event_code(
        dev: *mut libevdev,
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Forcibly disable an event code on this device, even if the underlying"]
    #[doc = " device provides it. This effectively mutes the respective set of"]
    #[doc = " events. libevdev will filter any events matching this type and code and"]
    #[doc = " none will reach the caller. libevdev_has_event_code() will return false for"]
    #[doc = " this code."]
    #[doc = ""]
    #[doc = " Disabling all event codes for a given type will not disable the event"]
    #[doc = " type. Use libevdev_disable_event_type() for that."]
    #[doc = ""]
    #[doc = " This is a local modification only affecting only this representation of"]
    #[doc = " this device."]
    #[doc = ""]
    #[doc = " Disabling codes of type EV_SYN will not work. Don't shoot yourself in the"]
    #[doc = " foot. It hurts."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param type The event type to disable (EV_ABS, EV_KEY, ...)"]
    #[doc = " @param code The event code to disable (ABS_X, REL_X, etc.)"]
    #[doc = ""]
    #[doc = " @return 0 on success or -1 otherwise"]
    #[doc = ""]
    #[doc = " @see libevdev_has_event_code"]
    #[doc = " @see libevdev_disable_event_type"]
    pub fn libevdev_disable_event_code(
        dev: *mut libevdev,
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Set the device's EV_ABS axis to the value defined in the abs"]
    #[doc = " parameter. This will be written to the kernel."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code The EV_ABS event code to modify, one of ABS_X, ABS_Y, etc."]
    #[doc = " @param abs Axis info to set the kernel axis to"]
    #[doc = ""]
    #[doc = " @return 0 on success, or a negative errno on failure"]
    #[doc = ""]
    #[doc = " @see libevdev_enable_event_code"]
    pub fn libevdev_kernel_set_abs_info(
        dev: *mut libevdev,
        code: ::std::os::raw::c_uint,
        abs: *const input_absinfo,
    ) -> ::std::os::raw::c_int;
}
#[doc = "< Turn the LED on"]
pub const libevdev_led_value_LIBEVDEV_LED_ON: libevdev_led_value = 3;
#[doc = "< Turn the LED off"]
pub const libevdev_led_value_LIBEVDEV_LED_OFF: libevdev_led_value = 4;
#[doc = " @ingroup kernel"]
pub type libevdev_led_value = u32;
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Turn an LED on or off. Convenience function, if you need to modify multiple"]
    #[doc = " LEDs simultaneously, use libevdev_kernel_set_led_values() instead."]
    #[doc = ""]
    #[doc = " @note enabling an LED requires write permissions on the device's file descriptor."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param code The EV_LED event code to modify, one of LED_NUML, LED_CAPSL, ..."]
    #[doc = " @param value Specifies whether to turn the LED on or off"]
    #[doc = " @return 0 on success, or a negative errno on failure"]
    pub fn libevdev_kernel_set_led_value(
        dev: *mut libevdev,
        code: ::std::os::raw::c_uint,
        value: libevdev_led_value,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Turn multiple LEDs on or off simultaneously. This function expects a pair"]
    #[doc = " of LED codes and values to set them to, terminated by a -1. For example, to"]
    #[doc = " switch the NumLock LED on but the CapsLock LED off, use:"]
    #[doc = ""]
    #[doc = " @code"]
    #[doc = "     libevdev_kernel_set_led_values(dev, LED_NUML, LIBEVDEV_LED_ON,"]
    #[doc = "                                         LED_CAPSL, LIBEVDEV_LED_OFF,"]
    #[doc = "                                         -1);"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " If any LED code or value is invalid, this function returns -EINVAL and no"]
    #[doc = " LEDs are modified."]
    #[doc = ""]
    #[doc = " @note enabling an LED requires write permissions on the device's file descriptor."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param ... A pair of LED_* event codes and libevdev_led_value_t, followed by"]
    #[doc = " -1 to terminate the list."]
    #[doc = " @return 0 on success, or a negative errno on failure"]
    pub fn libevdev_kernel_set_led_values(dev: *mut libevdev, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup kernel"]
    #[doc = ""]
    #[doc = " Set the clock ID to be used for timestamps. Further events from this device"]
    #[doc = " will report an event time based on the given clock."]
    #[doc = ""]
    #[doc = " This is a modification only affecting this representation of"]
    #[doc = " this device."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param clockid The clock to use for future events. Permitted values"]
    #[doc = " are CLOCK_MONOTONIC and CLOCK_REALTIME (the default)."]
    #[doc = " @return 0 on success, or a negative errno on failure"]
    pub fn libevdev_set_clock_id(
        dev: *mut libevdev,
        clockid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " Helper function to check if an event is of a specific type. This is"]
    #[doc = " virtually the same as:"]
    #[doc = ""]
    #[doc = "      ev->type == type"]
    #[doc = ""]
    #[doc = " with the exception that some sanity checks are performed to ensure type"]
    #[doc = " is valid."]
    #[doc = ""]
    #[doc = " @note The ranges for types are compiled into libevdev. If the kernel"]
    #[doc = " changes the max value, libevdev will not automatically pick these up."]
    #[doc = ""]
    #[doc = " @param ev The input event to check"]
    #[doc = " @param type Input event type to compare the event against (EV_REL, EV_ABS,"]
    #[doc = " etc.)"]
    #[doc = ""]
    #[doc = " @return 1 if the event type matches the given type, 0 otherwise (or if"]
    #[doc = " type is invalid)"]
    pub fn libevdev_event_is_type(
        ev: *const input_event,
        type_: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " Helper function to check if an event is of a specific type and code. This"]
    #[doc = " is virtually the same as:"]
    #[doc = ""]
    #[doc = "      ev->type == type && ev->code == code"]
    #[doc = ""]
    #[doc = " with the exception that some sanity checks are performed to ensure type and"]
    #[doc = " code are valid."]
    #[doc = ""]
    #[doc = " @note The ranges for types and codes are compiled into libevdev. If the kernel"]
    #[doc = " changes the max value, libevdev will not automatically pick these up."]
    #[doc = ""]
    #[doc = " @param ev The input event to check"]
    #[doc = " @param type Input event type to compare the event against (EV_REL, EV_ABS,"]
    #[doc = " etc.)"]
    #[doc = " @param code Input event code to compare the event against (ABS_X, REL_X,"]
    #[doc = " etc.)"]
    #[doc = ""]
    #[doc = " @return 1 if the event type matches the given type and code, 0 otherwise"]
    #[doc = " (or if type/code are invalid)"]
    pub fn libevdev_event_is_code(
        ev: *const input_event,
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " @param type The event type to return the name for."]
    #[doc = ""]
    #[doc = " @return The name of the given event type (e.g. EV_ABS) or NULL for an"]
    #[doc = " invalid type"]
    #[doc = ""]
    #[doc = " @note The list of names is compiled into libevdev. If the kernel adds new"]
    #[doc = " defines for new event types, libevdev will not automatically pick these up."]
    pub fn libevdev_event_type_get_name(
        type_: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " @param type The event type for the code to query (EV_SYN, EV_REL, etc.)"]
    #[doc = " @param code The event code to return the name for (e.g. ABS_X)"]
    #[doc = ""]
    #[doc = " @return The name of the given event code (e.g. ABS_X) or NULL for an"]
    #[doc = " invalid type or code"]
    #[doc = ""]
    #[doc = " @note The list of names is compiled into libevdev. If the kernel adds new"]
    #[doc = " defines for new event codes, libevdev will not automatically pick these up."]
    pub fn libevdev_event_code_get_name(
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " @param prop The input prop to return the name for (e.g. INPUT_PROP_BUTTONPAD)"]
    #[doc = ""]
    #[doc = " @return The name of the given input prop (e.g. INPUT_PROP_BUTTONPAD) or NULL for an"]
    #[doc = " invalid property"]
    #[doc = ""]
    #[doc = " @note The list of names is compiled into libevdev. If the kernel adds new"]
    #[doc = " defines for new properties libevdev will not automatically pick these up."]
    #[doc = " @note On older kernels input properties may not be defined and"]
    #[doc = " libevdev_property_get_name() will always return NULL"]
    pub fn libevdev_property_get_name(
        prop: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " @param type The event type to return the maximum for (EV_ABS, EV_REL, etc.). No max is defined for"]
    #[doc = " EV_SYN."]
    #[doc = ""]
    #[doc = " @return The max value defined for the given event type, e.g. ABS_MAX for a type of EV_ABS, or -1"]
    #[doc = " for an invalid type."]
    #[doc = ""]
    #[doc = " @note The max value is compiled into libevdev. If the kernel changes the"]
    #[doc = " max value, libevdev will not automatically pick these up."]
    pub fn libevdev_event_type_get_max(type_: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " Look up an event-type by its name. Event-types start with \"EV_\" followed by"]
    #[doc = " the name (eg., \"EV_ABS\"). The \"EV_\" prefix must be included in the name. It"]
    #[doc = " returns the constant assigned to the event-type or -1 if not found."]
    #[doc = ""]
    #[doc = " @param name A non-NULL string describing an input-event type (\"EV_KEY\","]
    #[doc = " \"EV_ABS\", ...), zero-terminated."]
    #[doc = ""]
    #[doc = " @return The given type constant for the passed name or -1 if not found."]
    #[doc = ""]
    #[doc = " @note EV_MAX is also recognized."]
    pub fn libevdev_event_type_from_name(
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " Look up an event-type by its name. Event-types start with \"EV_\" followed by"]
    #[doc = " the name (eg., \"EV_ABS\"). The \"EV_\" prefix must be included in the name. It"]
    #[doc = " returns the constant assigned to the event-type or -1 if not found."]
    #[doc = ""]
    #[doc = " @param name A non-NULL string describing an input-event type (\"EV_KEY\","]
    #[doc = " \"EV_ABS\", ...)."]
    #[doc = " @param len The length of the passed string excluding any terminating 0"]
    #[doc = " character."]
    #[doc = ""]
    #[doc = " @return The given type constant for the passed name or -1 if not found."]
    #[doc = ""]
    #[doc = " @note EV_MAX is also recognized."]
    pub fn libevdev_event_type_from_name_n(
        name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " Look up an event code by its type and name. Event codes start with a fixed"]
    #[doc = " prefix followed by their name (eg., \"ABS_X\"). The prefix must be included in"]
    #[doc = " the name. It returns the constant assigned to the event code or -1 if not"]
    #[doc = " found."]
    #[doc = ""]
    #[doc = " You have to pass the event type where to look for the name. For instance, to"]
    #[doc = " resolve \"ABS_X\" you need to pass EV_ABS as type and \"ABS_X\" as string."]
    #[doc = " Supported event codes are codes starting with SYN_, KEY_, BTN_, REL_, ABS_,"]
    #[doc = " MSC_, SND_, SW_, LED_, REP_, FF_."]
    #[doc = ""]
    #[doc = " @param type The event type (EV_* constant) where to look for the name."]
    #[doc = " @param name A non-NULL string describing an input-event code (\"KEY_A\","]
    #[doc = " \"ABS_X\", \"BTN_Y\", ...), zero-terminated."]
    #[doc = ""]
    #[doc = " @return The given code constant for the passed name or -1 if not found."]
    pub fn libevdev_event_code_from_name(
        type_: ::std::os::raw::c_uint,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " Look up an event code by its type and name. Event codes start with a fixed"]
    #[doc = " prefix followed by their name (eg., \"ABS_X\"). The prefix must be included in"]
    #[doc = " the name. It returns the constant assigned to the event code or -1 if not"]
    #[doc = " found."]
    #[doc = ""]
    #[doc = " You have to pass the event type where to look for the name. For instance, to"]
    #[doc = " resolve \"ABS_X\" you need to pass EV_ABS as type and \"ABS_X\" as string."]
    #[doc = " Supported event codes are codes starting with SYN_, KEY_, BTN_, REL_, ABS_,"]
    #[doc = " MSC_, SND_, SW_, LED_, REP_, FF_."]
    #[doc = ""]
    #[doc = " @param type The event type (EV_* constant) where to look for the name."]
    #[doc = " @param name A non-NULL string describing an input-event code (\"KEY_A\","]
    #[doc = " \"ABS_X\", \"BTN_Y\", ...)."]
    #[doc = " @param len The length of the string in @p name excluding any terminating 0"]
    #[doc = " character."]
    #[doc = ""]
    #[doc = " @return The given code constant for the name or -1 if not found."]
    pub fn libevdev_event_code_from_name_n(
        type_: ::std::os::raw::c_uint,
        name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " Look up an input property by its name. Properties start with the fixed"]
    #[doc = " prefix \"INPUT_PROP_\" followed by their name (eg., \"INPUT_PROP_POINTER\")."]
    #[doc = " The prefix must be included in the name. It returns the constant assigned"]
    #[doc = " to the property or -1 if not found."]
    #[doc = ""]
    #[doc = " @param name A non-NULL string describing an input property"]
    #[doc = ""]
    #[doc = " @return The given code constant for the name or -1 if not found."]
    pub fn libevdev_property_from_name(
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup misc"]
    #[doc = ""]
    #[doc = " Look up an input property by its name. Properties start with the fixed"]
    #[doc = " prefix \"INPUT_PROP_\" followed by their name (eg., \"INPUT_PROP_POINTER\")."]
    #[doc = " The prefix must be included in the name. It returns the constant assigned"]
    #[doc = " to the property or -1 if not found."]
    #[doc = ""]
    #[doc = " @param name A non-NULL string describing an input property"]
    #[doc = " @param len The length of the string in @p name excluding any terminating 0"]
    #[doc = " character."]
    #[doc = ""]
    #[doc = " @return The given code constant for the name or -1 if not found."]
    pub fn libevdev_property_from_name_n(
        name: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup bits"]
    #[doc = ""]
    #[doc = " Get the repeat delay and repeat period values for this device. This"]
    #[doc = " function is a convenience function only, EV_REP is supported by"]
    #[doc = " libevdev_get_event_value()."]
    #[doc = ""]
    #[doc = " @param dev The evdev device, already initialized with libevdev_set_fd()"]
    #[doc = " @param delay If not null, set to the repeat delay value"]
    #[doc = " @param period If not null, set to the repeat period value"]
    #[doc = ""]
    #[doc = " @return 0 on success, -1 if this device does not have repeat settings."]
    #[doc = ""]
    #[doc = " @note This function is signal-safe"]
    #[doc = ""]
    #[doc = " @see libevdev_get_event_value"]
    pub fn libevdev_get_repeat(
        dev: *const libevdev,
        delay: *mut ::std::os::raw::c_int,
        period: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libevdev_uinput {
    _unused: [u8; 0],
}
#[doc = "< let libevdev open and close @c /dev/uinput"]
pub const libevdev_uinput_open_mode_LIBEVDEV_UINPUT_OPEN_MANAGED: libevdev_uinput_open_mode = -2;
#[doc = " @defgroup uinput uinput device creation"]
#[doc = ""]
#[doc = " Creation of uinput devices based on existing libevdev devices. These functions"]
#[doc = " help to create uinput devices that emulate libevdev devices. In the simplest"]
#[doc = " form it serves to duplicate an existing device:"]
#[doc = ""]
#[doc = " @code"]
#[doc = " int err;"]
#[doc = " int fd, new_fd, uifd;"]
#[doc = " struct libevdev *dev;"]
#[doc = " struct libevdev_uinput *uidev;"]
#[doc = " struct input_event ev[2];"]
#[doc = ""]
#[doc = " fd = open(\"/dev/input/event0\", O_RDONLY);"]
#[doc = " if (fd < 0)"]
#[doc = "     return err;"]
#[doc = ""]
#[doc = " err = libevdev_new_from_fd(fd, &dev);"]
#[doc = " if (err != 0)"]
#[doc = "     return err;"]
#[doc = ""]
#[doc = " uifd = open(\"/dev/uinput\", O_RDWR);"]
#[doc = " if (uifd < 0)"]
#[doc = "     return -errno;"]
#[doc = ""]
#[doc = " err = libevdev_uinput_create_from_device(dev, uifd, &uidev);"]
#[doc = " if (err != 0)"]
#[doc = "     return err;"]
#[doc = ""]
#[doc = " // post a REL_X event"]
#[doc = " err = libevdev_uinput_write_event(uidev, EV_REL, REL_X, -1);"]
#[doc = " if (err != 0)"]
#[doc = "     return err;"]
#[doc = " libevdev_uinput_write_event(uidev, EV_SYN, SYN_REPORT, 0);"]
#[doc = " if (err != 0)"]
#[doc = "     return err;"]
#[doc = ""]
#[doc = " libevdev_uinput_destroy(uidev);"]
#[doc = " libevdev_free(dev);"]
#[doc = " close(uifd);"]
#[doc = " close(fd);"]
#[doc = ""]
#[doc = " @endcode"]
#[doc = ""]
#[doc = " Alternatively, a device can be constructed from scratch:"]
#[doc = ""]
#[doc = " @code"]
#[doc = " int err;"]
#[doc = " struct libevdev *dev;"]
#[doc = " struct libevdev_uinput *uidev;"]
#[doc = ""]
#[doc = " dev = libevdev_new();"]
#[doc = " libevdev_set_name(dev, \"test device\");"]
#[doc = " libevdev_enable_event_type(dev, EV_REL);"]
#[doc = " libevdev_enable_event_code(dev, EV_REL, REL_X, NULL);"]
#[doc = " libevdev_enable_event_code(dev, EV_REL, REL_Y, NULL);"]
#[doc = " libevdev_enable_event_type(dev, EV_KEY);"]
#[doc = " libevdev_enable_event_code(dev, EV_KEY, BTN_LEFT, NULL);"]
#[doc = " libevdev_enable_event_code(dev, EV_KEY, BTN_MIDDLE, NULL);"]
#[doc = " libevdev_enable_event_code(dev, EV_KEY, BTN_RIGHT, NULL);"]
#[doc = ""]
#[doc = " err = libevdev_uinput_create_from_device(dev,"]
#[doc = "                                          LIBEVDEV_UINPUT_OPEN_MANAGED,"]
#[doc = "                                          &uidev);"]
#[doc = " if (err != 0)"]
#[doc = "     return err;"]
#[doc = ""]
#[doc = " // ... do something ..."]
#[doc = ""]
#[doc = " libevdev_uinput_destroy(uidev);"]
#[doc = ""]
#[doc = " @endcode"]
pub type libevdev_uinput_open_mode = i32;
extern "C" {
    #[doc = " @ingroup uinput"]
    #[doc = ""]
    #[doc = " Create a uinput device based on the given libevdev device. The uinput device"]
    #[doc = " will be an exact copy of the libevdev device, minus the bits that uinput doesn't"]
    #[doc = " allow to be set."]
    #[doc = ""]
    #[doc = " If uinput_fd is @ref LIBEVDEV_UINPUT_OPEN_MANAGED, libevdev_uinput_create_from_device()"]
    #[doc = " will open @c /dev/uinput in read/write mode and manage the file descriptor."]
    #[doc = " Otherwise, uinput_fd must be opened by the caller and opened with the"]
    #[doc = " appropriate permissions."]
    #[doc = ""]
    #[doc = " The device's lifetime is tied to the uinput file descriptor, closing it will"]
    #[doc = " destroy the uinput device. You should call libevdev_uinput_destroy() before"]
    #[doc = " closing the file descriptor to free allocated resources."]
    #[doc = " A file descriptor can only create one uinput device at a time; the second device"]
    #[doc = " will fail with -EINVAL."]
    #[doc = ""]
    #[doc = " You don't need to keep the file descriptor variable around,"]
    #[doc = " libevdev_uinput_get_fd() will return it when needed."]
    #[doc = ""]
    #[doc = " @note Due to limitations in the uinput kernel module, REP_DELAY and"]
    #[doc = " REP_PERIOD will default to the kernel defaults, not to the ones set in the"]
    #[doc = " source device."]
    #[doc = ""]
    #[doc = " @param dev The device to duplicate"]
    #[doc = " @param uinput_fd @ref LIBEVDEV_UINPUT_OPEN_MANAGED or a file descriptor to @c /dev/uinput,"]
    #[doc = " @param[out] uinput_dev The newly created libevdev device."]
    #[doc = ""]
    #[doc = " @return 0 on success or a negative errno on failure. On failure, the value of"]
    #[doc = " uinput_dev is unmodified."]
    #[doc = ""]
    #[doc = " @see libevdev_uinput_destroy"]
    pub fn libevdev_uinput_create_from_device(
        dev: *const libevdev,
        uinput_fd: ::std::os::raw::c_int,
        uinput_dev: *mut *mut libevdev_uinput,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup uinput"]
    #[doc = ""]
    #[doc = " Destroy a previously created uinput device and free associated memory."]
    #[doc = ""]
    #[doc = " If the device was opened with @ref LIBEVDEV_UINPUT_OPEN_MANAGED,"]
    #[doc = " libevdev_uinput_destroy() also closes the file descriptor. Otherwise, the"]
    #[doc = " fd is left as-is and must be closed by the caller."]
    #[doc = ""]
    #[doc = " @param uinput_dev A previously created uinput device."]
    pub fn libevdev_uinput_destroy(uinput_dev: *mut libevdev_uinput);
}
extern "C" {
    #[doc = " @ingroup uinput"]
    #[doc = ""]
    #[doc = " Return the file descriptor used to create this uinput device. This is the"]
    #[doc = " fd pointing to <strong>/dev/uinput</strong>. This file descriptor may be used to write"]
    #[doc = " events that are emitted by the uinput device."]
    #[doc = " Closing this file descriptor will destroy the uinput device, you should"]
    #[doc = " call libevdev_uinput_destroy() first to free allocated resources."]
    #[doc = ""]
    #[doc = " @param uinput_dev A previously created uinput device."]
    #[doc = ""]
    #[doc = " @return The file descriptor used to create this device"]
    pub fn libevdev_uinput_get_fd(uinput_dev: *const libevdev_uinput) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @ingroup uinput"]
    #[doc = ""]
    #[doc = " Return the syspath representing this uinput device. If the UI_GET_SYSNAME"]
    #[doc = " ioctl not available, libevdev makes an educated guess."]
    #[doc = " The UI_GET_SYSNAME ioctl is available since Linux 3.15."]
    #[doc = ""]
    #[doc = " The syspath returned is the one of the input node itself"]
    #[doc = " (e.g. /sys/devices/virtual/input/input123), not the syspath of the device"]
    #[doc = " node returned with libevdev_uinput_get_devnode()."]
    #[doc = ""]
    #[doc = " @note This function may return NULL if UI_GET_SYSNAME is not available."]
    #[doc = " In that case, libevdev uses ctime and the device name to guess devices."]
    #[doc = " To avoid false positives, wait at least wait at least 1.5s between"]
    #[doc = " creating devices that have the same name."]
    #[doc = ""]
    #[doc = " @param uinput_dev A previously created uinput device."]
    #[doc = " @return The syspath for this device, including the preceding /sys"]
    #[doc = ""]
    #[doc = " @see libevdev_uinput_get_devnode"]
    pub fn libevdev_uinput_get_syspath(
        uinput_dev: *mut libevdev_uinput,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @ingroup uinput"]
    #[doc = ""]
    #[doc = " Return the device node representing this uinput device."]
    #[doc = ""]
    #[doc = " This relies on libevdev_uinput_get_syspath() to provide a valid syspath."]
    #[doc = " See libevdev_uinput_get_syspath() for more details."]
    #[doc = ""]
    #[doc = " @note This function may return NULL. libevdev may have to guess the"]
    #[doc = " syspath and the device node. See libevdev_uinput_get_syspath() for details."]
    #[doc = " @param uinput_dev A previously created uinput device."]
    #[doc = " @return The device node for this device, in the form of /dev/input/eventN"]
    #[doc = ""]
    #[doc = " @see libevdev_uinput_get_syspath"]
    pub fn libevdev_uinput_get_devnode(
        uinput_dev: *mut libevdev_uinput,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @ingroup uinput"]
    #[doc = ""]
    #[doc = " Post an event through the uinput device. It is the caller's responsibility"]
    #[doc = " that any event sequence is terminated with an EV_SYN/SYN_REPORT/0 event."]
    #[doc = " Otherwise, listeners on the device node will not see the events until the"]
    #[doc = " next EV_SYN event is posted."]
    #[doc = ""]
    #[doc = " @param uinput_dev A previously created uinput device."]
    #[doc = " @param type Event type (EV_ABS, EV_REL, etc.)"]
    #[doc = " @param code Event code (ABS_X, REL_Y, etc.)"]
    #[doc = " @param value The event value"]
    #[doc = " @return 0 on success or a negative errno on error"]
    pub fn libevdev_uinput_write_event(
        uinput_dev: *const libevdev_uinput,
        type_: ::std::os::raw::c_uint,
        code: ::std::os::raw::c_uint,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
